/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://code.google.com/p/google-apis-client-generator/
 * (build: 2014-11-17 18:43:33 UTC)
 * on 2014-12-15 at 21:51:42 UTC 
 * Modify at your own risk.
 */

package com.aqpup.model.spotshotendpoint;

/**
 * Service definition for Spotshotendpoint (v2).
 *
 * <p>
 * This is an API
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link SpotshotendpointRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class Spotshotendpoint extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.18.0-rc of the spotshotendpoint library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://spotshotme.appspot.com/_ah/api/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "spotshotendpoint/v2/";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public Spotshotendpoint(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  Spotshotendpoint(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * Create a request for the method "addComment2Photo".
   *
   * This request holds the parameters needed by the spotshotendpoint server.  After setting any
   * optional parameters, call the {@link AddComment2Photo#execute()} method to invoke the remote
   * operation.
   *
   * @param userId
   * @param content the {@link com.aqpup.model.spotshotendpoint.model.Comment}
   * @return the request
   */
  public AddComment2Photo addComment2Photo(java.lang.Long userId, com.aqpup.model.spotshotendpoint.model.Comment content) throws java.io.IOException {
    AddComment2Photo result = new AddComment2Photo(userId, content);
    initialize(result);
    return result;
  }

  public class AddComment2Photo extends SpotshotendpointRequest<com.aqpup.model.spotshotendpoint.model.Rating> {

    private static final String REST_PATH = "addComment2Photo/{userId}";

    /**
     * Create a request for the method "addComment2Photo".
     *
     * This request holds the parameters needed by the the spotshotendpoint server.  After setting any
     * optional parameters, call the {@link AddComment2Photo#execute()} method to invoke the remote
     * operation. <p> {@link AddComment2Photo#initialize(com.google.api.client.googleapis.services.Abs
     * tractGoogleClientRequest)} must be called to initialize this instance immediately after
     * invoking the constructor. </p>
     *
     * @param userId
     * @param content the {@link com.aqpup.model.spotshotendpoint.model.Comment}
     * @since 1.13
     */
    protected AddComment2Photo(java.lang.Long userId, com.aqpup.model.spotshotendpoint.model.Comment content) {
      super(Spotshotendpoint.this, "POST", REST_PATH, content, com.aqpup.model.spotshotendpoint.model.Rating.class);
      this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
    }

    @Override
    public AddComment2Photo setAlt(java.lang.String alt) {
      return (AddComment2Photo) super.setAlt(alt);
    }

    @Override
    public AddComment2Photo setFields(java.lang.String fields) {
      return (AddComment2Photo) super.setFields(fields);
    }

    @Override
    public AddComment2Photo setKey(java.lang.String key) {
      return (AddComment2Photo) super.setKey(key);
    }

    @Override
    public AddComment2Photo setOauthToken(java.lang.String oauthToken) {
      return (AddComment2Photo) super.setOauthToken(oauthToken);
    }

    @Override
    public AddComment2Photo setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (AddComment2Photo) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public AddComment2Photo setQuotaUser(java.lang.String quotaUser) {
      return (AddComment2Photo) super.setQuotaUser(quotaUser);
    }

    @Override
    public AddComment2Photo setUserIp(java.lang.String userIp) {
      return (AddComment2Photo) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long userId;

    /**

     */
    public java.lang.Long getUserId() {
      return userId;
    }

    public AddComment2Photo setUserId(java.lang.Long userId) {
      this.userId = userId;
      return this;
    }

    @Override
    public AddComment2Photo set(String parameterName, Object value) {
      return (AddComment2Photo) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "addNewPhoto2User".
   *
   * This request holds the parameters needed by the spotshotendpoint server.  After setting any
   * optional parameters, call the {@link AddNewPhoto2User#execute()} method to invoke the remote
   * operation.
   *
   * @param id
   * @param content the {@link com.aqpup.model.spotshotendpoint.model.Photo}
   * @return the request
   */
  public AddNewPhoto2User addNewPhoto2User(java.lang.Long id, com.aqpup.model.spotshotendpoint.model.Photo content) throws java.io.IOException {
    AddNewPhoto2User result = new AddNewPhoto2User(id, content);
    initialize(result);
    return result;
  }

  public class AddNewPhoto2User extends SpotshotendpointRequest<com.aqpup.model.spotshotendpoint.model.User> {

    private static final String REST_PATH = "addNewPhoto2User/{id}";

    /**
     * Create a request for the method "addNewPhoto2User".
     *
     * This request holds the parameters needed by the the spotshotendpoint server.  After setting any
     * optional parameters, call the {@link AddNewPhoto2User#execute()} method to invoke the remote
     * operation. <p> {@link AddNewPhoto2User#initialize(com.google.api.client.googleapis.services.Abs
     * tractGoogleClientRequest)} must be called to initialize this instance immediately after
     * invoking the constructor. </p>
     *
     * @param id
     * @param content the {@link com.aqpup.model.spotshotendpoint.model.Photo}
     * @since 1.13
     */
    protected AddNewPhoto2User(java.lang.Long id, com.aqpup.model.spotshotendpoint.model.Photo content) {
      super(Spotshotendpoint.this, "POST", REST_PATH, content, com.aqpup.model.spotshotendpoint.model.User.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
    }

    @Override
    public AddNewPhoto2User setAlt(java.lang.String alt) {
      return (AddNewPhoto2User) super.setAlt(alt);
    }

    @Override
    public AddNewPhoto2User setFields(java.lang.String fields) {
      return (AddNewPhoto2User) super.setFields(fields);
    }

    @Override
    public AddNewPhoto2User setKey(java.lang.String key) {
      return (AddNewPhoto2User) super.setKey(key);
    }

    @Override
    public AddNewPhoto2User setOauthToken(java.lang.String oauthToken) {
      return (AddNewPhoto2User) super.setOauthToken(oauthToken);
    }

    @Override
    public AddNewPhoto2User setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (AddNewPhoto2User) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public AddNewPhoto2User setQuotaUser(java.lang.String quotaUser) {
      return (AddNewPhoto2User) super.setQuotaUser(quotaUser);
    }

    @Override
    public AddNewPhoto2User setUserIp(java.lang.String userIp) {
      return (AddNewPhoto2User) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long id;

    /**

     */
    public java.lang.Long getId() {
      return id;
    }

    public AddNewPhoto2User setId(java.lang.Long id) {
      this.id = id;
      return this;
    }

    @Override
    public AddNewPhoto2User set(String parameterName, Object value) {
      return (AddNewPhoto2User) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "deleteAllPhotosAndDocuments".
   *
   * This request holds the parameters needed by the spotshotendpoint server.  After setting any
   * optional parameters, call the {@link DeleteAllPhotosAndDocuments#execute()} method to invoke the
   * remote operation.
   *
   * @return the request
   */
  public DeleteAllPhotosAndDocuments deleteAllPhotosAndDocuments() throws java.io.IOException {
    DeleteAllPhotosAndDocuments result = new DeleteAllPhotosAndDocuments();
    initialize(result);
    return result;
  }

  public class DeleteAllPhotosAndDocuments extends SpotshotendpointRequest<Void> {

    private static final String REST_PATH = "allphotosanddocuments";

    /**
     * Create a request for the method "deleteAllPhotosAndDocuments".
     *
     * This request holds the parameters needed by the the spotshotendpoint server.  After setting any
     * optional parameters, call the {@link DeleteAllPhotosAndDocuments#execute()} method to invoke
     * the remote operation. <p> {@link DeleteAllPhotosAndDocuments#initialize(com.google.api.client.g
     * oogleapis.services.AbstractGoogleClientRequest)} must be called to initialize this instance
     * immediately after invoking the constructor. </p>
     *
     * @since 1.13
     */
    protected DeleteAllPhotosAndDocuments() {
      super(Spotshotendpoint.this, "DELETE", REST_PATH, null, Void.class);
    }

    @Override
    public DeleteAllPhotosAndDocuments setAlt(java.lang.String alt) {
      return (DeleteAllPhotosAndDocuments) super.setAlt(alt);
    }

    @Override
    public DeleteAllPhotosAndDocuments setFields(java.lang.String fields) {
      return (DeleteAllPhotosAndDocuments) super.setFields(fields);
    }

    @Override
    public DeleteAllPhotosAndDocuments setKey(java.lang.String key) {
      return (DeleteAllPhotosAndDocuments) super.setKey(key);
    }

    @Override
    public DeleteAllPhotosAndDocuments setOauthToken(java.lang.String oauthToken) {
      return (DeleteAllPhotosAndDocuments) super.setOauthToken(oauthToken);
    }

    @Override
    public DeleteAllPhotosAndDocuments setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (DeleteAllPhotosAndDocuments) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public DeleteAllPhotosAndDocuments setQuotaUser(java.lang.String quotaUser) {
      return (DeleteAllPhotosAndDocuments) super.setQuotaUser(quotaUser);
    }

    @Override
    public DeleteAllPhotosAndDocuments setUserIp(java.lang.String userIp) {
      return (DeleteAllPhotosAndDocuments) super.setUserIp(userIp);
    }

    @Override
    public DeleteAllPhotosAndDocuments set(String parameterName, Object value) {
      return (DeleteAllPhotosAndDocuments) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "deleteAllRatings".
   *
   * This request holds the parameters needed by the spotshotendpoint server.  After setting any
   * optional parameters, call the {@link DeleteAllRatings#execute()} method to invoke the remote
   * operation.
   *
   * @return the request
   */
  public DeleteAllRatings deleteAllRatings() throws java.io.IOException {
    DeleteAllRatings result = new DeleteAllRatings();
    initialize(result);
    return result;
  }

  public class DeleteAllRatings extends SpotshotendpointRequest<Void> {

    private static final String REST_PATH = "allratings";

    /**
     * Create a request for the method "deleteAllRatings".
     *
     * This request holds the parameters needed by the the spotshotendpoint server.  After setting any
     * optional parameters, call the {@link DeleteAllRatings#execute()} method to invoke the remote
     * operation. <p> {@link DeleteAllRatings#initialize(com.google.api.client.googleapis.services.Abs
     * tractGoogleClientRequest)} must be called to initialize this instance immediately after
     * invoking the constructor. </p>
     *
     * @since 1.13
     */
    protected DeleteAllRatings() {
      super(Spotshotendpoint.this, "DELETE", REST_PATH, null, Void.class);
    }

    @Override
    public DeleteAllRatings setAlt(java.lang.String alt) {
      return (DeleteAllRatings) super.setAlt(alt);
    }

    @Override
    public DeleteAllRatings setFields(java.lang.String fields) {
      return (DeleteAllRatings) super.setFields(fields);
    }

    @Override
    public DeleteAllRatings setKey(java.lang.String key) {
      return (DeleteAllRatings) super.setKey(key);
    }

    @Override
    public DeleteAllRatings setOauthToken(java.lang.String oauthToken) {
      return (DeleteAllRatings) super.setOauthToken(oauthToken);
    }

    @Override
    public DeleteAllRatings setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (DeleteAllRatings) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public DeleteAllRatings setQuotaUser(java.lang.String quotaUser) {
      return (DeleteAllRatings) super.setQuotaUser(quotaUser);
    }

    @Override
    public DeleteAllRatings setUserIp(java.lang.String userIp) {
      return (DeleteAllRatings) super.setUserIp(userIp);
    }

    @Override
    public DeleteAllRatings set(String parameterName, Object value) {
      return (DeleteAllRatings) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "existsUsername".
   *
   * This request holds the parameters needed by the spotshotendpoint server.  After setting any
   * optional parameters, call the {@link ExistsUsername#execute()} method to invoke the remote
   * operation.
   *
   * @param username
   * @return the request
   */
  public ExistsUsername existsUsername(java.lang.String username) throws java.io.IOException {
    ExistsUsername result = new ExistsUsername(username);
    initialize(result);
    return result;
  }

  public class ExistsUsername extends SpotshotendpointRequest<com.aqpup.model.spotshotendpoint.model.BooleanResponse> {

    private static final String REST_PATH = "existsUsername/{username}";

    /**
     * Create a request for the method "existsUsername".
     *
     * This request holds the parameters needed by the the spotshotendpoint server.  After setting any
     * optional parameters, call the {@link ExistsUsername#execute()} method to invoke the remote
     * operation. <p> {@link ExistsUsername#initialize(com.google.api.client.googleapis.services.Abstr
     * actGoogleClientRequest)} must be called to initialize this instance immediately after invoking
     * the constructor. </p>
     *
     * @param username
     * @since 1.13
     */
    protected ExistsUsername(java.lang.String username) {
      super(Spotshotendpoint.this, "POST", REST_PATH, null, com.aqpup.model.spotshotendpoint.model.BooleanResponse.class);
      this.username = com.google.api.client.util.Preconditions.checkNotNull(username, "Required parameter username must be specified.");
    }

    @Override
    public ExistsUsername setAlt(java.lang.String alt) {
      return (ExistsUsername) super.setAlt(alt);
    }

    @Override
    public ExistsUsername setFields(java.lang.String fields) {
      return (ExistsUsername) super.setFields(fields);
    }

    @Override
    public ExistsUsername setKey(java.lang.String key) {
      return (ExistsUsername) super.setKey(key);
    }

    @Override
    public ExistsUsername setOauthToken(java.lang.String oauthToken) {
      return (ExistsUsername) super.setOauthToken(oauthToken);
    }

    @Override
    public ExistsUsername setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ExistsUsername) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ExistsUsername setQuotaUser(java.lang.String quotaUser) {
      return (ExistsUsername) super.setQuotaUser(quotaUser);
    }

    @Override
    public ExistsUsername setUserIp(java.lang.String userIp) {
      return (ExistsUsername) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String username;

    /**

     */
    public java.lang.String getUsername() {
      return username;
    }

    public ExistsUsername setUsername(java.lang.String username) {
      this.username = username;
      return this;
    }

    @Override
    public ExistsUsername set(String parameterName, Object value) {
      return (ExistsUsername) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "getBestPhoto".
   *
   * This request holds the parameters needed by the spotshotendpoint server.  After setting any
   * optional parameters, call the {@link GetBestPhoto#execute()} method to invoke the remote
   * operation.
   *
   * @param idUser
   * @param latitude
   * @param longitude
   * @return the request
   */
  public GetBestPhoto getBestPhoto(java.lang.Long idUser, java.lang.String latitude, java.lang.String longitude) throws java.io.IOException {
    GetBestPhoto result = new GetBestPhoto(idUser, latitude, longitude);
    initialize(result);
    return result;
  }

  public class GetBestPhoto extends SpotshotendpointRequest<com.aqpup.model.spotshotendpoint.model.CollectionResponsePhoto> {

    private static final String REST_PATH = "collectionresponse_photo/{idUser}/{latitude}/{longitude}";

    /**
     * Create a request for the method "getBestPhoto".
     *
     * This request holds the parameters needed by the the spotshotendpoint server.  After setting any
     * optional parameters, call the {@link GetBestPhoto#execute()} method to invoke the remote
     * operation. <p> {@link
     * GetBestPhoto#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param idUser
     * @param latitude
     * @param longitude
     * @since 1.13
     */
    protected GetBestPhoto(java.lang.Long idUser, java.lang.String latitude, java.lang.String longitude) {
      super(Spotshotendpoint.this, "GET", REST_PATH, null, com.aqpup.model.spotshotendpoint.model.CollectionResponsePhoto.class);
      this.idUser = com.google.api.client.util.Preconditions.checkNotNull(idUser, "Required parameter idUser must be specified.");
      this.latitude = com.google.api.client.util.Preconditions.checkNotNull(latitude, "Required parameter latitude must be specified.");
      this.longitude = com.google.api.client.util.Preconditions.checkNotNull(longitude, "Required parameter longitude must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public GetBestPhoto setAlt(java.lang.String alt) {
      return (GetBestPhoto) super.setAlt(alt);
    }

    @Override
    public GetBestPhoto setFields(java.lang.String fields) {
      return (GetBestPhoto) super.setFields(fields);
    }

    @Override
    public GetBestPhoto setKey(java.lang.String key) {
      return (GetBestPhoto) super.setKey(key);
    }

    @Override
    public GetBestPhoto setOauthToken(java.lang.String oauthToken) {
      return (GetBestPhoto) super.setOauthToken(oauthToken);
    }

    @Override
    public GetBestPhoto setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (GetBestPhoto) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public GetBestPhoto setQuotaUser(java.lang.String quotaUser) {
      return (GetBestPhoto) super.setQuotaUser(quotaUser);
    }

    @Override
    public GetBestPhoto setUserIp(java.lang.String userIp) {
      return (GetBestPhoto) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long idUser;

    /**

     */
    public java.lang.Long getIdUser() {
      return idUser;
    }

    public GetBestPhoto setIdUser(java.lang.Long idUser) {
      this.idUser = idUser;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String latitude;

    /**

     */
    public java.lang.String getLatitude() {
      return latitude;
    }

    public GetBestPhoto setLatitude(java.lang.String latitude) {
      this.latitude = latitude;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String longitude;

    /**

     */
    public java.lang.String getLongitude() {
      return longitude;
    }

    public GetBestPhoto setLongitude(java.lang.String longitude) {
      this.longitude = longitude;
      return this;
    }

    @Override
    public GetBestPhoto set(String parameterName, Object value) {
      return (GetBestPhoto) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "getComment".
   *
   * This request holds the parameters needed by the spotshotendpoint server.  After setting any
   * optional parameters, call the {@link GetComment#execute()} method to invoke the remote operation.
   *
   * @param id
   * @return the request
   */
  public GetComment getComment(java.lang.String id) throws java.io.IOException {
    GetComment result = new GetComment(id);
    initialize(result);
    return result;
  }

  public class GetComment extends SpotshotendpointRequest<com.aqpup.model.spotshotendpoint.model.Comment> {

    private static final String REST_PATH = "comment/{id}";

    /**
     * Create a request for the method "getComment".
     *
     * This request holds the parameters needed by the the spotshotendpoint server.  After setting any
     * optional parameters, call the {@link GetComment#execute()} method to invoke the remote
     * operation. <p> {@link
     * GetComment#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param id
     * @since 1.13
     */
    protected GetComment(java.lang.String id) {
      super(Spotshotendpoint.this, "GET", REST_PATH, null, com.aqpup.model.spotshotendpoint.model.Comment.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public GetComment setAlt(java.lang.String alt) {
      return (GetComment) super.setAlt(alt);
    }

    @Override
    public GetComment setFields(java.lang.String fields) {
      return (GetComment) super.setFields(fields);
    }

    @Override
    public GetComment setKey(java.lang.String key) {
      return (GetComment) super.setKey(key);
    }

    @Override
    public GetComment setOauthToken(java.lang.String oauthToken) {
      return (GetComment) super.setOauthToken(oauthToken);
    }

    @Override
    public GetComment setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (GetComment) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public GetComment setQuotaUser(java.lang.String quotaUser) {
      return (GetComment) super.setQuotaUser(quotaUser);
    }

    @Override
    public GetComment setUserIp(java.lang.String userIp) {
      return (GetComment) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String id;

    /**

     */
    public java.lang.String getId() {
      return id;
    }

    public GetComment setId(java.lang.String id) {
      this.id = id;
      return this;
    }

    @Override
    public GetComment set(String parameterName, Object value) {
      return (GetComment) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "getFriendship".
   *
   * This request holds the parameters needed by the spotshotendpoint server.  After setting any
   * optional parameters, call the {@link GetFriendship#execute()} method to invoke the remote
   * operation.
   *
   * @param id
   * @return the request
   */
  public GetFriendship getFriendship(java.lang.String id) throws java.io.IOException {
    GetFriendship result = new GetFriendship(id);
    initialize(result);
    return result;
  }

  public class GetFriendship extends SpotshotendpointRequest<com.aqpup.model.spotshotendpoint.model.Friendship> {

    private static final String REST_PATH = "friendship/{id}";

    /**
     * Create a request for the method "getFriendship".
     *
     * This request holds the parameters needed by the the spotshotendpoint server.  After setting any
     * optional parameters, call the {@link GetFriendship#execute()} method to invoke the remote
     * operation. <p> {@link GetFriendship#initialize(com.google.api.client.googleapis.services.Abstra
     * ctGoogleClientRequest)} must be called to initialize this instance immediately after invoking
     * the constructor. </p>
     *
     * @param id
     * @since 1.13
     */
    protected GetFriendship(java.lang.String id) {
      super(Spotshotendpoint.this, "GET", REST_PATH, null, com.aqpup.model.spotshotendpoint.model.Friendship.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public GetFriendship setAlt(java.lang.String alt) {
      return (GetFriendship) super.setAlt(alt);
    }

    @Override
    public GetFriendship setFields(java.lang.String fields) {
      return (GetFriendship) super.setFields(fields);
    }

    @Override
    public GetFriendship setKey(java.lang.String key) {
      return (GetFriendship) super.setKey(key);
    }

    @Override
    public GetFriendship setOauthToken(java.lang.String oauthToken) {
      return (GetFriendship) super.setOauthToken(oauthToken);
    }

    @Override
    public GetFriendship setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (GetFriendship) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public GetFriendship setQuotaUser(java.lang.String quotaUser) {
      return (GetFriendship) super.setQuotaUser(quotaUser);
    }

    @Override
    public GetFriendship setUserIp(java.lang.String userIp) {
      return (GetFriendship) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String id;

    /**

     */
    public java.lang.String getId() {
      return id;
    }

    public GetFriendship setId(java.lang.String id) {
      this.id = id;
      return this;
    }

    @Override
    public GetFriendship set(String parameterName, Object value) {
      return (GetFriendship) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "getFriendships".
   *
   * This request holds the parameters needed by the spotshotendpoint server.  After setting any
   * optional parameters, call the {@link GetFriendships#execute()} method to invoke the remote
   * operation.
   *
   * @param userId
   * @return the request
   */
  public GetFriendships getFriendships(java.lang.Long userId) throws java.io.IOException {
    GetFriendships result = new GetFriendships(userId);
    initialize(result);
    return result;
  }

  public class GetFriendships extends SpotshotendpointRequest<com.aqpup.model.spotshotendpoint.model.CollectionResponseFriendship> {

    private static final String REST_PATH = "collectionresponse_friendship/{userId}";

    /**
     * Create a request for the method "getFriendships".
     *
     * This request holds the parameters needed by the the spotshotendpoint server.  After setting any
     * optional parameters, call the {@link GetFriendships#execute()} method to invoke the remote
     * operation. <p> {@link GetFriendships#initialize(com.google.api.client.googleapis.services.Abstr
     * actGoogleClientRequest)} must be called to initialize this instance immediately after invoking
     * the constructor. </p>
     *
     * @param userId
     * @since 1.13
     */
    protected GetFriendships(java.lang.Long userId) {
      super(Spotshotendpoint.this, "GET", REST_PATH, null, com.aqpup.model.spotshotendpoint.model.CollectionResponseFriendship.class);
      this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public GetFriendships setAlt(java.lang.String alt) {
      return (GetFriendships) super.setAlt(alt);
    }

    @Override
    public GetFriendships setFields(java.lang.String fields) {
      return (GetFriendships) super.setFields(fields);
    }

    @Override
    public GetFriendships setKey(java.lang.String key) {
      return (GetFriendships) super.setKey(key);
    }

    @Override
    public GetFriendships setOauthToken(java.lang.String oauthToken) {
      return (GetFriendships) super.setOauthToken(oauthToken);
    }

    @Override
    public GetFriendships setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (GetFriendships) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public GetFriendships setQuotaUser(java.lang.String quotaUser) {
      return (GetFriendships) super.setQuotaUser(quotaUser);
    }

    @Override
    public GetFriendships setUserIp(java.lang.String userIp) {
      return (GetFriendships) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long userId;

    /**

     */
    public java.lang.Long getUserId() {
      return userId;
    }

    public GetFriendships setUserId(java.lang.Long userId) {
      this.userId = userId;
      return this;
    }

    @Override
    public GetFriendships set(String parameterName, Object value) {
      return (GetFriendships) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "getPendingFriendships".
   *
   * This request holds the parameters needed by the spotshotendpoint server.  After setting any
   * optional parameters, call the {@link GetPendingFriendships#execute()} method to invoke the remote
   * operation.
   *
   * @param userId
   * @return the request
   */
  public GetPendingFriendships getPendingFriendships(java.lang.Long userId) throws java.io.IOException {
    GetPendingFriendships result = new GetPendingFriendships(userId);
    initialize(result);
    return result;
  }

  public class GetPendingFriendships extends SpotshotendpointRequest<com.aqpup.model.spotshotendpoint.model.CollectionResponseFriendship> {

    private static final String REST_PATH = "friendship/user";

    /**
     * Create a request for the method "getPendingFriendships".
     *
     * This request holds the parameters needed by the the spotshotendpoint server.  After setting any
     * optional parameters, call the {@link GetPendingFriendships#execute()} method to invoke the
     * remote operation. <p> {@link GetPendingFriendships#initialize(com.google.api.client.googleapis.
     * services.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
     * after invoking the constructor. </p>
     *
     * @param userId
     * @since 1.13
     */
    protected GetPendingFriendships(java.lang.Long userId) {
      super(Spotshotendpoint.this, "GET", REST_PATH, null, com.aqpup.model.spotshotendpoint.model.CollectionResponseFriendship.class);
      this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public GetPendingFriendships setAlt(java.lang.String alt) {
      return (GetPendingFriendships) super.setAlt(alt);
    }

    @Override
    public GetPendingFriendships setFields(java.lang.String fields) {
      return (GetPendingFriendships) super.setFields(fields);
    }

    @Override
    public GetPendingFriendships setKey(java.lang.String key) {
      return (GetPendingFriendships) super.setKey(key);
    }

    @Override
    public GetPendingFriendships setOauthToken(java.lang.String oauthToken) {
      return (GetPendingFriendships) super.setOauthToken(oauthToken);
    }

    @Override
    public GetPendingFriendships setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (GetPendingFriendships) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public GetPendingFriendships setQuotaUser(java.lang.String quotaUser) {
      return (GetPendingFriendships) super.setQuotaUser(quotaUser);
    }

    @Override
    public GetPendingFriendships setUserIp(java.lang.String userIp) {
      return (GetPendingFriendships) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long userId;

    /**

     */
    public java.lang.Long getUserId() {
      return userId;
    }

    public GetPendingFriendships setUserId(java.lang.Long userId) {
      this.userId = userId;
      return this;
    }

    @Override
    public GetPendingFriendships set(String parameterName, Object value) {
      return (GetPendingFriendships) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "getPhoto".
   *
   * This request holds the parameters needed by the spotshotendpoint server.  After setting any
   * optional parameters, call the {@link GetPhoto#execute()} method to invoke the remote operation.
   *
   * @param id
   * @return the request
   */
  public GetPhoto getPhoto(java.lang.String id) throws java.io.IOException {
    GetPhoto result = new GetPhoto(id);
    initialize(result);
    return result;
  }

  public class GetPhoto extends SpotshotendpointRequest<com.aqpup.model.spotshotendpoint.model.Photo> {

    private static final String REST_PATH = "photo/{id}";

    /**
     * Create a request for the method "getPhoto".
     *
     * This request holds the parameters needed by the the spotshotendpoint server.  After setting any
     * optional parameters, call the {@link GetPhoto#execute()} method to invoke the remote operation.
     * <p> {@link
     * GetPhoto#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param id
     * @since 1.13
     */
    protected GetPhoto(java.lang.String id) {
      super(Spotshotendpoint.this, "GET", REST_PATH, null, com.aqpup.model.spotshotendpoint.model.Photo.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public GetPhoto setAlt(java.lang.String alt) {
      return (GetPhoto) super.setAlt(alt);
    }

    @Override
    public GetPhoto setFields(java.lang.String fields) {
      return (GetPhoto) super.setFields(fields);
    }

    @Override
    public GetPhoto setKey(java.lang.String key) {
      return (GetPhoto) super.setKey(key);
    }

    @Override
    public GetPhoto setOauthToken(java.lang.String oauthToken) {
      return (GetPhoto) super.setOauthToken(oauthToken);
    }

    @Override
    public GetPhoto setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (GetPhoto) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public GetPhoto setQuotaUser(java.lang.String quotaUser) {
      return (GetPhoto) super.setQuotaUser(quotaUser);
    }

    @Override
    public GetPhoto setUserIp(java.lang.String userIp) {
      return (GetPhoto) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String id;

    /**

     */
    public java.lang.String getId() {
      return id;
    }

    public GetPhoto setId(java.lang.String id) {
      this.id = id;
      return this;
    }

    @Override
    public GetPhoto set(String parameterName, Object value) {
      return (GetPhoto) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "getPhotoNeighborhood".
   *
   * This request holds the parameters needed by the spotshotendpoint server.  After setting any
   * optional parameters, call the {@link GetPhotoNeighborhood#execute()} method to invoke the remote
   * operation.
   *
   * @param latitude
   * @param longitude
   * @param distanceInMeters
   * @param count
   * @return the request
   */
  public GetPhotoNeighborhood getPhotoNeighborhood(java.lang.String latitude, java.lang.String longitude, java.lang.Long distanceInMeters, java.lang.Integer count) throws java.io.IOException {
    GetPhotoNeighborhood result = new GetPhotoNeighborhood(latitude, longitude, distanceInMeters, count);
    initialize(result);
    return result;
  }

  public class GetPhotoNeighborhood extends SpotshotendpointRequest<com.aqpup.model.spotshotendpoint.model.CollectionResponsePhoto> {

    private static final String REST_PATH = "collectionresponse_photo/{latitude}/{longitude}/{distanceInMeters}/{count}";

    /**
     * Create a request for the method "getPhotoNeighborhood".
     *
     * This request holds the parameters needed by the the spotshotendpoint server.  After setting any
     * optional parameters, call the {@link GetPhotoNeighborhood#execute()} method to invoke the
     * remote operation. <p> {@link GetPhotoNeighborhood#initialize(com.google.api.client.googleapis.s
     * ervices.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
     * after invoking the constructor. </p>
     *
     * @param latitude
     * @param longitude
     * @param distanceInMeters
     * @param count
     * @since 1.13
     */
    protected GetPhotoNeighborhood(java.lang.String latitude, java.lang.String longitude, java.lang.Long distanceInMeters, java.lang.Integer count) {
      super(Spotshotendpoint.this, "GET", REST_PATH, null, com.aqpup.model.spotshotendpoint.model.CollectionResponsePhoto.class);
      this.latitude = com.google.api.client.util.Preconditions.checkNotNull(latitude, "Required parameter latitude must be specified.");
      this.longitude = com.google.api.client.util.Preconditions.checkNotNull(longitude, "Required parameter longitude must be specified.");
      this.distanceInMeters = com.google.api.client.util.Preconditions.checkNotNull(distanceInMeters, "Required parameter distanceInMeters must be specified.");
      this.count = com.google.api.client.util.Preconditions.checkNotNull(count, "Required parameter count must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public GetPhotoNeighborhood setAlt(java.lang.String alt) {
      return (GetPhotoNeighborhood) super.setAlt(alt);
    }

    @Override
    public GetPhotoNeighborhood setFields(java.lang.String fields) {
      return (GetPhotoNeighborhood) super.setFields(fields);
    }

    @Override
    public GetPhotoNeighborhood setKey(java.lang.String key) {
      return (GetPhotoNeighborhood) super.setKey(key);
    }

    @Override
    public GetPhotoNeighborhood setOauthToken(java.lang.String oauthToken) {
      return (GetPhotoNeighborhood) super.setOauthToken(oauthToken);
    }

    @Override
    public GetPhotoNeighborhood setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (GetPhotoNeighborhood) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public GetPhotoNeighborhood setQuotaUser(java.lang.String quotaUser) {
      return (GetPhotoNeighborhood) super.setQuotaUser(quotaUser);
    }

    @Override
    public GetPhotoNeighborhood setUserIp(java.lang.String userIp) {
      return (GetPhotoNeighborhood) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String latitude;

    /**

     */
    public java.lang.String getLatitude() {
      return latitude;
    }

    public GetPhotoNeighborhood setLatitude(java.lang.String latitude) {
      this.latitude = latitude;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String longitude;

    /**

     */
    public java.lang.String getLongitude() {
      return longitude;
    }

    public GetPhotoNeighborhood setLongitude(java.lang.String longitude) {
      this.longitude = longitude;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Long distanceInMeters;

    /**

     */
    public java.lang.Long getDistanceInMeters() {
      return distanceInMeters;
    }

    public GetPhotoNeighborhood setDistanceInMeters(java.lang.Long distanceInMeters) {
      this.distanceInMeters = distanceInMeters;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Integer count;

    /**

     */
    public java.lang.Integer getCount() {
      return count;
    }

    public GetPhotoNeighborhood setCount(java.lang.Integer count) {
      this.count = count;
      return this;
    }

    @Override
    public GetPhotoNeighborhood set(String parameterName, Object value) {
      return (GetPhotoNeighborhood) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "getPhotosByUserInRange".
   *
   * This request holds the parameters needed by the spotshotendpoint server.  After setting any
   * optional parameters, call the {@link GetPhotosByUserInRange#execute()} method to invoke the
   * remote operation.
   *
   * @param userId
   * @return the request
   */
  public GetPhotosByUserInRange getPhotosByUserInRange(java.lang.Long userId) throws java.io.IOException {
    GetPhotosByUserInRange result = new GetPhotosByUserInRange(userId);
    initialize(result);
    return result;
  }

  public class GetPhotosByUserInRange extends SpotshotendpointRequest<com.aqpup.model.spotshotendpoint.model.CollectionResponsePhoto> {

    private static final String REST_PATH = "collectionresponse_photo/{userId}";

    /**
     * Create a request for the method "getPhotosByUserInRange".
     *
     * This request holds the parameters needed by the the spotshotendpoint server.  After setting any
     * optional parameters, call the {@link GetPhotosByUserInRange#execute()} method to invoke the
     * remote operation. <p> {@link GetPhotosByUserInRange#initialize(com.google.api.client.googleapis
     * .services.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
     * after invoking the constructor. </p>
     *
     * @param userId
     * @since 1.13
     */
    protected GetPhotosByUserInRange(java.lang.Long userId) {
      super(Spotshotendpoint.this, "GET", REST_PATH, null, com.aqpup.model.spotshotendpoint.model.CollectionResponsePhoto.class);
      this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public GetPhotosByUserInRange setAlt(java.lang.String alt) {
      return (GetPhotosByUserInRange) super.setAlt(alt);
    }

    @Override
    public GetPhotosByUserInRange setFields(java.lang.String fields) {
      return (GetPhotosByUserInRange) super.setFields(fields);
    }

    @Override
    public GetPhotosByUserInRange setKey(java.lang.String key) {
      return (GetPhotosByUserInRange) super.setKey(key);
    }

    @Override
    public GetPhotosByUserInRange setOauthToken(java.lang.String oauthToken) {
      return (GetPhotosByUserInRange) super.setOauthToken(oauthToken);
    }

    @Override
    public GetPhotosByUserInRange setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (GetPhotosByUserInRange) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public GetPhotosByUserInRange setQuotaUser(java.lang.String quotaUser) {
      return (GetPhotosByUserInRange) super.setQuotaUser(quotaUser);
    }

    @Override
    public GetPhotosByUserInRange setUserIp(java.lang.String userIp) {
      return (GetPhotosByUserInRange) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long userId;

    /**

     */
    public java.lang.Long getUserId() {
      return userId;
    }

    public GetPhotosByUserInRange setUserId(java.lang.Long userId) {
      this.userId = userId;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Integer lowerBound;

    /**

     */
    public java.lang.Integer getLowerBound() {
      return lowerBound;
    }

    public GetPhotosByUserInRange setLowerBound(java.lang.Integer lowerBound) {
      this.lowerBound = lowerBound;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Integer upperBound;

    /**

     */
    public java.lang.Integer getUpperBound() {
      return upperBound;
    }

    public GetPhotosByUserInRange setUpperBound(java.lang.Integer upperBound) {
      this.upperBound = upperBound;
      return this;
    }

    @Override
    public GetPhotosByUserInRange set(String parameterName, Object value) {
      return (GetPhotosByUserInRange) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "getRatingbyUser".
   *
   * This request holds the parameters needed by the spotshotendpoint server.  After setting any
   * optional parameters, call the {@link GetRatingbyUser#execute()} method to invoke the remote
   * operation.
   *
   * @param userId
   * @param photoId
   * @return the request
   */
  public GetRatingbyUser getRatingbyUser(java.lang.Long userId, java.lang.String photoId) throws java.io.IOException {
    GetRatingbyUser result = new GetRatingbyUser(userId, photoId);
    initialize(result);
    return result;
  }

  public class GetRatingbyUser extends SpotshotendpointRequest<com.aqpup.model.spotshotendpoint.model.Rating> {

    private static final String REST_PATH = "rating/{userId}/{photoId}";

    /**
     * Create a request for the method "getRatingbyUser".
     *
     * This request holds the parameters needed by the the spotshotendpoint server.  After setting any
     * optional parameters, call the {@link GetRatingbyUser#execute()} method to invoke the remote
     * operation. <p> {@link GetRatingbyUser#initialize(com.google.api.client.googleapis.services.Abst
     * ractGoogleClientRequest)} must be called to initialize this instance immediately after invoking
     * the constructor. </p>
     *
     * @param userId
     * @param photoId
     * @since 1.13
     */
    protected GetRatingbyUser(java.lang.Long userId, java.lang.String photoId) {
      super(Spotshotendpoint.this, "GET", REST_PATH, null, com.aqpup.model.spotshotendpoint.model.Rating.class);
      this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
      this.photoId = com.google.api.client.util.Preconditions.checkNotNull(photoId, "Required parameter photoId must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public GetRatingbyUser setAlt(java.lang.String alt) {
      return (GetRatingbyUser) super.setAlt(alt);
    }

    @Override
    public GetRatingbyUser setFields(java.lang.String fields) {
      return (GetRatingbyUser) super.setFields(fields);
    }

    @Override
    public GetRatingbyUser setKey(java.lang.String key) {
      return (GetRatingbyUser) super.setKey(key);
    }

    @Override
    public GetRatingbyUser setOauthToken(java.lang.String oauthToken) {
      return (GetRatingbyUser) super.setOauthToken(oauthToken);
    }

    @Override
    public GetRatingbyUser setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (GetRatingbyUser) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public GetRatingbyUser setQuotaUser(java.lang.String quotaUser) {
      return (GetRatingbyUser) super.setQuotaUser(quotaUser);
    }

    @Override
    public GetRatingbyUser setUserIp(java.lang.String userIp) {
      return (GetRatingbyUser) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long userId;

    /**

     */
    public java.lang.Long getUserId() {
      return userId;
    }

    public GetRatingbyUser setUserId(java.lang.Long userId) {
      this.userId = userId;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String photoId;

    /**

     */
    public java.lang.String getPhotoId() {
      return photoId;
    }

    public GetRatingbyUser setPhotoId(java.lang.String photoId) {
      this.photoId = photoId;
      return this;
    }

    @Override
    public GetRatingbyUser set(String parameterName, Object value) {
      return (GetRatingbyUser) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "getUser".
   *
   * This request holds the parameters needed by the spotshotendpoint server.  After setting any
   * optional parameters, call the {@link GetUser#execute()} method to invoke the remote operation.
   *
   * @param id
   * @return the request
   */
  public GetUser getUser(java.lang.Long id) throws java.io.IOException {
    GetUser result = new GetUser(id);
    initialize(result);
    return result;
  }

  public class GetUser extends SpotshotendpointRequest<com.aqpup.model.spotshotendpoint.model.User> {

    private static final String REST_PATH = "user/{id}";

    /**
     * Create a request for the method "getUser".
     *
     * This request holds the parameters needed by the the spotshotendpoint server.  After setting any
     * optional parameters, call the {@link GetUser#execute()} method to invoke the remote operation.
     * <p> {@link
     * GetUser#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
     * be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param id
     * @since 1.13
     */
    protected GetUser(java.lang.Long id) {
      super(Spotshotendpoint.this, "GET", REST_PATH, null, com.aqpup.model.spotshotendpoint.model.User.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public GetUser setAlt(java.lang.String alt) {
      return (GetUser) super.setAlt(alt);
    }

    @Override
    public GetUser setFields(java.lang.String fields) {
      return (GetUser) super.setFields(fields);
    }

    @Override
    public GetUser setKey(java.lang.String key) {
      return (GetUser) super.setKey(key);
    }

    @Override
    public GetUser setOauthToken(java.lang.String oauthToken) {
      return (GetUser) super.setOauthToken(oauthToken);
    }

    @Override
    public GetUser setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (GetUser) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public GetUser setQuotaUser(java.lang.String quotaUser) {
      return (GetUser) super.setQuotaUser(quotaUser);
    }

    @Override
    public GetUser setUserIp(java.lang.String userIp) {
      return (GetUser) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long id;

    /**

     */
    public java.lang.Long getId() {
      return id;
    }

    public GetUser setId(java.lang.Long id) {
      this.id = id;
      return this;
    }

    @Override
    public GetUser set(String parameterName, Object value) {
      return (GetUser) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "getUserByEmailEndpoint".
   *
   * This request holds the parameters needed by the spotshotendpoint server.  After setting any
   * optional parameters, call the {@link GetUserByEmailEndpoint#execute()} method to invoke the
   * remote operation.
   *
   * @param email
   * @return the request
   */
  public GetUserByEmailEndpoint getUserByEmailEndpoint(java.lang.String email) throws java.io.IOException {
    GetUserByEmailEndpoint result = new GetUserByEmailEndpoint(email);
    initialize(result);
    return result;
  }

  public class GetUserByEmailEndpoint extends SpotshotendpointRequest<com.aqpup.model.spotshotendpoint.model.CollectionResponseUser> {

    private static final String REST_PATH = "collectionresponse_user/{email}";

    /**
     * Create a request for the method "getUserByEmailEndpoint".
     *
     * This request holds the parameters needed by the the spotshotendpoint server.  After setting any
     * optional parameters, call the {@link GetUserByEmailEndpoint#execute()} method to invoke the
     * remote operation. <p> {@link GetUserByEmailEndpoint#initialize(com.google.api.client.googleapis
     * .services.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
     * after invoking the constructor. </p>
     *
     * @param email
     * @since 1.13
     */
    protected GetUserByEmailEndpoint(java.lang.String email) {
      super(Spotshotendpoint.this, "GET", REST_PATH, null, com.aqpup.model.spotshotendpoint.model.CollectionResponseUser.class);
      this.email = com.google.api.client.util.Preconditions.checkNotNull(email, "Required parameter email must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public GetUserByEmailEndpoint setAlt(java.lang.String alt) {
      return (GetUserByEmailEndpoint) super.setAlt(alt);
    }

    @Override
    public GetUserByEmailEndpoint setFields(java.lang.String fields) {
      return (GetUserByEmailEndpoint) super.setFields(fields);
    }

    @Override
    public GetUserByEmailEndpoint setKey(java.lang.String key) {
      return (GetUserByEmailEndpoint) super.setKey(key);
    }

    @Override
    public GetUserByEmailEndpoint setOauthToken(java.lang.String oauthToken) {
      return (GetUserByEmailEndpoint) super.setOauthToken(oauthToken);
    }

    @Override
    public GetUserByEmailEndpoint setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (GetUserByEmailEndpoint) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public GetUserByEmailEndpoint setQuotaUser(java.lang.String quotaUser) {
      return (GetUserByEmailEndpoint) super.setQuotaUser(quotaUser);
    }

    @Override
    public GetUserByEmailEndpoint setUserIp(java.lang.String userIp) {
      return (GetUserByEmailEndpoint) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String email;

    /**

     */
    public java.lang.String getEmail() {
      return email;
    }

    public GetUserByEmailEndpoint setEmail(java.lang.String email) {
      this.email = email;
      return this;
    }

    @Override
    public GetUserByEmailEndpoint set(String parameterName, Object value) {
      return (GetUserByEmailEndpoint) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "insertComment".
   *
   * This request holds the parameters needed by the spotshotendpoint server.  After setting any
   * optional parameters, call the {@link InsertComment#execute()} method to invoke the remote
   * operation.
   *
   * @param content the {@link com.aqpup.model.spotshotendpoint.model.Comment}
   * @return the request
   */
  public InsertComment insertComment(com.aqpup.model.spotshotendpoint.model.Comment content) throws java.io.IOException {
    InsertComment result = new InsertComment(content);
    initialize(result);
    return result;
  }

  public class InsertComment extends SpotshotendpointRequest<com.aqpup.model.spotshotendpoint.model.Comment> {

    private static final String REST_PATH = "comment";

    /**
     * Create a request for the method "insertComment".
     *
     * This request holds the parameters needed by the the spotshotendpoint server.  After setting any
     * optional parameters, call the {@link InsertComment#execute()} method to invoke the remote
     * operation. <p> {@link InsertComment#initialize(com.google.api.client.googleapis.services.Abstra
     * ctGoogleClientRequest)} must be called to initialize this instance immediately after invoking
     * the constructor. </p>
     *
     * @param content the {@link com.aqpup.model.spotshotendpoint.model.Comment}
     * @since 1.13
     */
    protected InsertComment(com.aqpup.model.spotshotendpoint.model.Comment content) {
      super(Spotshotendpoint.this, "POST", REST_PATH, content, com.aqpup.model.spotshotendpoint.model.Comment.class);
    }

    @Override
    public InsertComment setAlt(java.lang.String alt) {
      return (InsertComment) super.setAlt(alt);
    }

    @Override
    public InsertComment setFields(java.lang.String fields) {
      return (InsertComment) super.setFields(fields);
    }

    @Override
    public InsertComment setKey(java.lang.String key) {
      return (InsertComment) super.setKey(key);
    }

    @Override
    public InsertComment setOauthToken(java.lang.String oauthToken) {
      return (InsertComment) super.setOauthToken(oauthToken);
    }

    @Override
    public InsertComment setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (InsertComment) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public InsertComment setQuotaUser(java.lang.String quotaUser) {
      return (InsertComment) super.setQuotaUser(quotaUser);
    }

    @Override
    public InsertComment setUserIp(java.lang.String userIp) {
      return (InsertComment) super.setUserIp(userIp);
    }

    @Override
    public InsertComment set(String parameterName, Object value) {
      return (InsertComment) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "insertFriendship".
   *
   * This request holds the parameters needed by the spotshotendpoint server.  After setting any
   * optional parameters, call the {@link InsertFriendship#execute()} method to invoke the remote
   * operation.
   *
   * @param content the {@link com.aqpup.model.spotshotendpoint.model.Friendship}
   * @return the request
   */
  public InsertFriendship insertFriendship(com.aqpup.model.spotshotendpoint.model.Friendship content) throws java.io.IOException {
    InsertFriendship result = new InsertFriendship(content);
    initialize(result);
    return result;
  }

  public class InsertFriendship extends SpotshotendpointRequest<com.aqpup.model.spotshotendpoint.model.Friendship> {

    private static final String REST_PATH = "friendship";

    /**
     * Create a request for the method "insertFriendship".
     *
     * This request holds the parameters needed by the the spotshotendpoint server.  After setting any
     * optional parameters, call the {@link InsertFriendship#execute()} method to invoke the remote
     * operation. <p> {@link InsertFriendship#initialize(com.google.api.client.googleapis.services.Abs
     * tractGoogleClientRequest)} must be called to initialize this instance immediately after
     * invoking the constructor. </p>
     *
     * @param content the {@link com.aqpup.model.spotshotendpoint.model.Friendship}
     * @since 1.13
     */
    protected InsertFriendship(com.aqpup.model.spotshotendpoint.model.Friendship content) {
      super(Spotshotendpoint.this, "POST", REST_PATH, content, com.aqpup.model.spotshotendpoint.model.Friendship.class);
    }

    @Override
    public InsertFriendship setAlt(java.lang.String alt) {
      return (InsertFriendship) super.setAlt(alt);
    }

    @Override
    public InsertFriendship setFields(java.lang.String fields) {
      return (InsertFriendship) super.setFields(fields);
    }

    @Override
    public InsertFriendship setKey(java.lang.String key) {
      return (InsertFriendship) super.setKey(key);
    }

    @Override
    public InsertFriendship setOauthToken(java.lang.String oauthToken) {
      return (InsertFriendship) super.setOauthToken(oauthToken);
    }

    @Override
    public InsertFriendship setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (InsertFriendship) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public InsertFriendship setQuotaUser(java.lang.String quotaUser) {
      return (InsertFriendship) super.setQuotaUser(quotaUser);
    }

    @Override
    public InsertFriendship setUserIp(java.lang.String userIp) {
      return (InsertFriendship) super.setUserIp(userIp);
    }

    @Override
    public InsertFriendship set(String parameterName, Object value) {
      return (InsertFriendship) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "insertPhoto".
   *
   * This request holds the parameters needed by the spotshotendpoint server.  After setting any
   * optional parameters, call the {@link InsertPhoto#execute()} method to invoke the remote
   * operation.
   *
   * @param content the {@link com.aqpup.model.spotshotendpoint.model.Photo}
   * @return the request
   */
  public InsertPhoto insertPhoto(com.aqpup.model.spotshotendpoint.model.Photo content) throws java.io.IOException {
    InsertPhoto result = new InsertPhoto(content);
    initialize(result);
    return result;
  }

  public class InsertPhoto extends SpotshotendpointRequest<com.aqpup.model.spotshotendpoint.model.Photo> {

    private static final String REST_PATH = "photo";

    /**
     * Create a request for the method "insertPhoto".
     *
     * This request holds the parameters needed by the the spotshotendpoint server.  After setting any
     * optional parameters, call the {@link InsertPhoto#execute()} method to invoke the remote
     * operation. <p> {@link
     * InsertPhoto#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param content the {@link com.aqpup.model.spotshotendpoint.model.Photo}
     * @since 1.13
     */
    protected InsertPhoto(com.aqpup.model.spotshotendpoint.model.Photo content) {
      super(Spotshotendpoint.this, "POST", REST_PATH, content, com.aqpup.model.spotshotendpoint.model.Photo.class);
    }

    @Override
    public InsertPhoto setAlt(java.lang.String alt) {
      return (InsertPhoto) super.setAlt(alt);
    }

    @Override
    public InsertPhoto setFields(java.lang.String fields) {
      return (InsertPhoto) super.setFields(fields);
    }

    @Override
    public InsertPhoto setKey(java.lang.String key) {
      return (InsertPhoto) super.setKey(key);
    }

    @Override
    public InsertPhoto setOauthToken(java.lang.String oauthToken) {
      return (InsertPhoto) super.setOauthToken(oauthToken);
    }

    @Override
    public InsertPhoto setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (InsertPhoto) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public InsertPhoto setQuotaUser(java.lang.String quotaUser) {
      return (InsertPhoto) super.setQuotaUser(quotaUser);
    }

    @Override
    public InsertPhoto setUserIp(java.lang.String userIp) {
      return (InsertPhoto) super.setUserIp(userIp);
    }

    @Override
    public InsertPhoto set(String parameterName, Object value) {
      return (InsertPhoto) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "insertRating".
   *
   * This request holds the parameters needed by the spotshotendpoint server.  After setting any
   * optional parameters, call the {@link InsertRating#execute()} method to invoke the remote
   * operation.
   *
   * @param content the {@link com.aqpup.model.spotshotendpoint.model.Rating}
   * @return the request
   */
  public InsertRating insertRating(com.aqpup.model.spotshotendpoint.model.Rating content) throws java.io.IOException {
    InsertRating result = new InsertRating(content);
    initialize(result);
    return result;
  }

  public class InsertRating extends SpotshotendpointRequest<com.aqpup.model.spotshotendpoint.model.Rating> {

    private static final String REST_PATH = "rating";

    /**
     * Create a request for the method "insertRating".
     *
     * This request holds the parameters needed by the the spotshotendpoint server.  After setting any
     * optional parameters, call the {@link InsertRating#execute()} method to invoke the remote
     * operation. <p> {@link
     * InsertRating#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param content the {@link com.aqpup.model.spotshotendpoint.model.Rating}
     * @since 1.13
     */
    protected InsertRating(com.aqpup.model.spotshotendpoint.model.Rating content) {
      super(Spotshotendpoint.this, "POST", REST_PATH, content, com.aqpup.model.spotshotendpoint.model.Rating.class);
    }

    @Override
    public InsertRating setAlt(java.lang.String alt) {
      return (InsertRating) super.setAlt(alt);
    }

    @Override
    public InsertRating setFields(java.lang.String fields) {
      return (InsertRating) super.setFields(fields);
    }

    @Override
    public InsertRating setKey(java.lang.String key) {
      return (InsertRating) super.setKey(key);
    }

    @Override
    public InsertRating setOauthToken(java.lang.String oauthToken) {
      return (InsertRating) super.setOauthToken(oauthToken);
    }

    @Override
    public InsertRating setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (InsertRating) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public InsertRating setQuotaUser(java.lang.String quotaUser) {
      return (InsertRating) super.setQuotaUser(quotaUser);
    }

    @Override
    public InsertRating setUserIp(java.lang.String userIp) {
      return (InsertRating) super.setUserIp(userIp);
    }

    @Override
    public InsertRating set(String parameterName, Object value) {
      return (InsertRating) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "insertUser".
   *
   * This request holds the parameters needed by the spotshotendpoint server.  After setting any
   * optional parameters, call the {@link InsertUser#execute()} method to invoke the remote operation.
   *
   * @param content the {@link com.aqpup.model.spotshotendpoint.model.User}
   * @return the request
   */
  public InsertUser insertUser(com.aqpup.model.spotshotendpoint.model.User content) throws java.io.IOException {
    InsertUser result = new InsertUser(content);
    initialize(result);
    return result;
  }

  public class InsertUser extends SpotshotendpointRequest<com.aqpup.model.spotshotendpoint.model.User> {

    private static final String REST_PATH = "user";

    /**
     * Create a request for the method "insertUser".
     *
     * This request holds the parameters needed by the the spotshotendpoint server.  After setting any
     * optional parameters, call the {@link InsertUser#execute()} method to invoke the remote
     * operation. <p> {@link
     * InsertUser#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param content the {@link com.aqpup.model.spotshotendpoint.model.User}
     * @since 1.13
     */
    protected InsertUser(com.aqpup.model.spotshotendpoint.model.User content) {
      super(Spotshotendpoint.this, "POST", REST_PATH, content, com.aqpup.model.spotshotendpoint.model.User.class);
    }

    @Override
    public InsertUser setAlt(java.lang.String alt) {
      return (InsertUser) super.setAlt(alt);
    }

    @Override
    public InsertUser setFields(java.lang.String fields) {
      return (InsertUser) super.setFields(fields);
    }

    @Override
    public InsertUser setKey(java.lang.String key) {
      return (InsertUser) super.setKey(key);
    }

    @Override
    public InsertUser setOauthToken(java.lang.String oauthToken) {
      return (InsertUser) super.setOauthToken(oauthToken);
    }

    @Override
    public InsertUser setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (InsertUser) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public InsertUser setQuotaUser(java.lang.String quotaUser) {
      return (InsertUser) super.setQuotaUser(quotaUser);
    }

    @Override
    public InsertUser setUserIp(java.lang.String userIp) {
      return (InsertUser) super.setUserIp(userIp);
    }

    @Override
    public InsertUser set(String parameterName, Object value) {
      return (InsertUser) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "listComment".
   *
   * This request holds the parameters needed by the spotshotendpoint server.  After setting any
   * optional parameters, call the {@link ListComment#execute()} method to invoke the remote
   * operation.
   *
   * @return the request
   */
  public ListComment listComment() throws java.io.IOException {
    ListComment result = new ListComment();
    initialize(result);
    return result;
  }

  public class ListComment extends SpotshotendpointRequest<com.aqpup.model.spotshotendpoint.model.CollectionResponseComment> {

    private static final String REST_PATH = "comment";

    /**
     * Create a request for the method "listComment".
     *
     * This request holds the parameters needed by the the spotshotendpoint server.  After setting any
     * optional parameters, call the {@link ListComment#execute()} method to invoke the remote
     * operation. <p> {@link
     * ListComment#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @since 1.13
     */
    protected ListComment() {
      super(Spotshotendpoint.this, "GET", REST_PATH, null, com.aqpup.model.spotshotendpoint.model.CollectionResponseComment.class);
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public ListComment setAlt(java.lang.String alt) {
      return (ListComment) super.setAlt(alt);
    }

    @Override
    public ListComment setFields(java.lang.String fields) {
      return (ListComment) super.setFields(fields);
    }

    @Override
    public ListComment setKey(java.lang.String key) {
      return (ListComment) super.setKey(key);
    }

    @Override
    public ListComment setOauthToken(java.lang.String oauthToken) {
      return (ListComment) super.setOauthToken(oauthToken);
    }

    @Override
    public ListComment setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ListComment) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ListComment setQuotaUser(java.lang.String quotaUser) {
      return (ListComment) super.setQuotaUser(quotaUser);
    }

    @Override
    public ListComment setUserIp(java.lang.String userIp) {
      return (ListComment) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String cursor;

    /**

     */
    public java.lang.String getCursor() {
      return cursor;
    }

    public ListComment setCursor(java.lang.String cursor) {
      this.cursor = cursor;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Integer limit;

    /**

     */
    public java.lang.Integer getLimit() {
      return limit;
    }

    public ListComment setLimit(java.lang.Integer limit) {
      this.limit = limit;
      return this;
    }

    @Override
    public ListComment set(String parameterName, Object value) {
      return (ListComment) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "listFriendship".
   *
   * This request holds the parameters needed by the spotshotendpoint server.  After setting any
   * optional parameters, call the {@link ListFriendship#execute()} method to invoke the remote
   * operation.
   *
   * @return the request
   */
  public ListFriendship listFriendship() throws java.io.IOException {
    ListFriendship result = new ListFriendship();
    initialize(result);
    return result;
  }

  public class ListFriendship extends SpotshotendpointRequest<com.aqpup.model.spotshotendpoint.model.CollectionResponseFriendship> {

    private static final String REST_PATH = "friendship";

    /**
     * Create a request for the method "listFriendship".
     *
     * This request holds the parameters needed by the the spotshotendpoint server.  After setting any
     * optional parameters, call the {@link ListFriendship#execute()} method to invoke the remote
     * operation. <p> {@link ListFriendship#initialize(com.google.api.client.googleapis.services.Abstr
     * actGoogleClientRequest)} must be called to initialize this instance immediately after invoking
     * the constructor. </p>
     *
     * @since 1.13
     */
    protected ListFriendship() {
      super(Spotshotendpoint.this, "GET", REST_PATH, null, com.aqpup.model.spotshotendpoint.model.CollectionResponseFriendship.class);
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public ListFriendship setAlt(java.lang.String alt) {
      return (ListFriendship) super.setAlt(alt);
    }

    @Override
    public ListFriendship setFields(java.lang.String fields) {
      return (ListFriendship) super.setFields(fields);
    }

    @Override
    public ListFriendship setKey(java.lang.String key) {
      return (ListFriendship) super.setKey(key);
    }

    @Override
    public ListFriendship setOauthToken(java.lang.String oauthToken) {
      return (ListFriendship) super.setOauthToken(oauthToken);
    }

    @Override
    public ListFriendship setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ListFriendship) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ListFriendship setQuotaUser(java.lang.String quotaUser) {
      return (ListFriendship) super.setQuotaUser(quotaUser);
    }

    @Override
    public ListFriendship setUserIp(java.lang.String userIp) {
      return (ListFriendship) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String cursor;

    /**

     */
    public java.lang.String getCursor() {
      return cursor;
    }

    public ListFriendship setCursor(java.lang.String cursor) {
      this.cursor = cursor;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Integer limit;

    /**

     */
    public java.lang.Integer getLimit() {
      return limit;
    }

    public ListFriendship setLimit(java.lang.Integer limit) {
      this.limit = limit;
      return this;
    }

    @Override
    public ListFriendship set(String parameterName, Object value) {
      return (ListFriendship) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "listPhoto".
   *
   * This request holds the parameters needed by the spotshotendpoint server.  After setting any
   * optional parameters, call the {@link ListPhoto#execute()} method to invoke the remote operation.
   *
   * @return the request
   */
  public ListPhoto listPhoto() throws java.io.IOException {
    ListPhoto result = new ListPhoto();
    initialize(result);
    return result;
  }

  public class ListPhoto extends SpotshotendpointRequest<com.aqpup.model.spotshotendpoint.model.CollectionResponsePhoto> {

    private static final String REST_PATH = "photo";

    /**
     * Create a request for the method "listPhoto".
     *
     * This request holds the parameters needed by the the spotshotendpoint server.  After setting any
     * optional parameters, call the {@link ListPhoto#execute()} method to invoke the remote
     * operation. <p> {@link
     * ListPhoto#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @since 1.13
     */
    protected ListPhoto() {
      super(Spotshotendpoint.this, "GET", REST_PATH, null, com.aqpup.model.spotshotendpoint.model.CollectionResponsePhoto.class);
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public ListPhoto setAlt(java.lang.String alt) {
      return (ListPhoto) super.setAlt(alt);
    }

    @Override
    public ListPhoto setFields(java.lang.String fields) {
      return (ListPhoto) super.setFields(fields);
    }

    @Override
    public ListPhoto setKey(java.lang.String key) {
      return (ListPhoto) super.setKey(key);
    }

    @Override
    public ListPhoto setOauthToken(java.lang.String oauthToken) {
      return (ListPhoto) super.setOauthToken(oauthToken);
    }

    @Override
    public ListPhoto setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ListPhoto) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ListPhoto setQuotaUser(java.lang.String quotaUser) {
      return (ListPhoto) super.setQuotaUser(quotaUser);
    }

    @Override
    public ListPhoto setUserIp(java.lang.String userIp) {
      return (ListPhoto) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String cursor;

    /**

     */
    public java.lang.String getCursor() {
      return cursor;
    }

    public ListPhoto setCursor(java.lang.String cursor) {
      this.cursor = cursor;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Integer limit;

    /**

     */
    public java.lang.Integer getLimit() {
      return limit;
    }

    public ListPhoto setLimit(java.lang.Integer limit) {
      this.limit = limit;
      return this;
    }

    @Override
    public ListPhoto set(String parameterName, Object value) {
      return (ListPhoto) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "listRating".
   *
   * This request holds the parameters needed by the spotshotendpoint server.  After setting any
   * optional parameters, call the {@link ListRating#execute()} method to invoke the remote operation.
   *
   * @return the request
   */
  public ListRating listRating() throws java.io.IOException {
    ListRating result = new ListRating();
    initialize(result);
    return result;
  }

  public class ListRating extends SpotshotendpointRequest<com.aqpup.model.spotshotendpoint.model.CollectionResponseRating> {

    private static final String REST_PATH = "rating";

    /**
     * Create a request for the method "listRating".
     *
     * This request holds the parameters needed by the the spotshotendpoint server.  After setting any
     * optional parameters, call the {@link ListRating#execute()} method to invoke the remote
     * operation. <p> {@link
     * ListRating#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @since 1.13
     */
    protected ListRating() {
      super(Spotshotendpoint.this, "GET", REST_PATH, null, com.aqpup.model.spotshotendpoint.model.CollectionResponseRating.class);
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public ListRating setAlt(java.lang.String alt) {
      return (ListRating) super.setAlt(alt);
    }

    @Override
    public ListRating setFields(java.lang.String fields) {
      return (ListRating) super.setFields(fields);
    }

    @Override
    public ListRating setKey(java.lang.String key) {
      return (ListRating) super.setKey(key);
    }

    @Override
    public ListRating setOauthToken(java.lang.String oauthToken) {
      return (ListRating) super.setOauthToken(oauthToken);
    }

    @Override
    public ListRating setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ListRating) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ListRating setQuotaUser(java.lang.String quotaUser) {
      return (ListRating) super.setQuotaUser(quotaUser);
    }

    @Override
    public ListRating setUserIp(java.lang.String userIp) {
      return (ListRating) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String cursor;

    /**

     */
    public java.lang.String getCursor() {
      return cursor;
    }

    public ListRating setCursor(java.lang.String cursor) {
      this.cursor = cursor;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Integer limit;

    /**

     */
    public java.lang.Integer getLimit() {
      return limit;
    }

    public ListRating setLimit(java.lang.Integer limit) {
      this.limit = limit;
      return this;
    }

    @Override
    public ListRating set(String parameterName, Object value) {
      return (ListRating) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "listUser".
   *
   * This request holds the parameters needed by the spotshotendpoint server.  After setting any
   * optional parameters, call the {@link ListUser#execute()} method to invoke the remote operation.
   *
   * @return the request
   */
  public ListUser listUser() throws java.io.IOException {
    ListUser result = new ListUser();
    initialize(result);
    return result;
  }

  public class ListUser extends SpotshotendpointRequest<com.aqpup.model.spotshotendpoint.model.CollectionResponseUser> {

    private static final String REST_PATH = "user";

    /**
     * Create a request for the method "listUser".
     *
     * This request holds the parameters needed by the the spotshotendpoint server.  After setting any
     * optional parameters, call the {@link ListUser#execute()} method to invoke the remote operation.
     * <p> {@link
     * ListUser#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @since 1.13
     */
    protected ListUser() {
      super(Spotshotendpoint.this, "GET", REST_PATH, null, com.aqpup.model.spotshotendpoint.model.CollectionResponseUser.class);
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public ListUser setAlt(java.lang.String alt) {
      return (ListUser) super.setAlt(alt);
    }

    @Override
    public ListUser setFields(java.lang.String fields) {
      return (ListUser) super.setFields(fields);
    }

    @Override
    public ListUser setKey(java.lang.String key) {
      return (ListUser) super.setKey(key);
    }

    @Override
    public ListUser setOauthToken(java.lang.String oauthToken) {
      return (ListUser) super.setOauthToken(oauthToken);
    }

    @Override
    public ListUser setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ListUser) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ListUser setQuotaUser(java.lang.String quotaUser) {
      return (ListUser) super.setQuotaUser(quotaUser);
    }

    @Override
    public ListUser setUserIp(java.lang.String userIp) {
      return (ListUser) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String cursor;

    /**

     */
    public java.lang.String getCursor() {
      return cursor;
    }

    public ListUser setCursor(java.lang.String cursor) {
      this.cursor = cursor;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Integer limit;

    /**

     */
    public java.lang.Integer getLimit() {
      return limit;
    }

    public ListUser setLimit(java.lang.Integer limit) {
      this.limit = limit;
      return this;
    }

    @Override
    public ListUser set(String parameterName, Object value) {
      return (ListUser) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "registerDevice".
   *
   * This request holds the parameters needed by the spotshotendpoint server.  After setting any
   * optional parameters, call the {@link RegisterDevice#execute()} method to invoke the remote
   * operation.
   *
   * @param gmail
   * @param regId
   * @return the request
   */
  public RegisterDevice registerDevice(java.lang.String gmail, java.lang.String regId) throws java.io.IOException {
    RegisterDevice result = new RegisterDevice(gmail, regId);
    initialize(result);
    return result;
  }

  public class RegisterDevice extends SpotshotendpointRequest<Void> {

    private static final String REST_PATH = "registerDevice/{gmail}/{regId}";

    /**
     * Create a request for the method "registerDevice".
     *
     * This request holds the parameters needed by the the spotshotendpoint server.  After setting any
     * optional parameters, call the {@link RegisterDevice#execute()} method to invoke the remote
     * operation. <p> {@link RegisterDevice#initialize(com.google.api.client.googleapis.services.Abstr
     * actGoogleClientRequest)} must be called to initialize this instance immediately after invoking
     * the constructor. </p>
     *
     * @param gmail
     * @param regId
     * @since 1.13
     */
    protected RegisterDevice(java.lang.String gmail, java.lang.String regId) {
      super(Spotshotendpoint.this, "POST", REST_PATH, null, Void.class);
      this.gmail = com.google.api.client.util.Preconditions.checkNotNull(gmail, "Required parameter gmail must be specified.");
      this.regId = com.google.api.client.util.Preconditions.checkNotNull(regId, "Required parameter regId must be specified.");
    }

    @Override
    public RegisterDevice setAlt(java.lang.String alt) {
      return (RegisterDevice) super.setAlt(alt);
    }

    @Override
    public RegisterDevice setFields(java.lang.String fields) {
      return (RegisterDevice) super.setFields(fields);
    }

    @Override
    public RegisterDevice setKey(java.lang.String key) {
      return (RegisterDevice) super.setKey(key);
    }

    @Override
    public RegisterDevice setOauthToken(java.lang.String oauthToken) {
      return (RegisterDevice) super.setOauthToken(oauthToken);
    }

    @Override
    public RegisterDevice setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (RegisterDevice) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public RegisterDevice setQuotaUser(java.lang.String quotaUser) {
      return (RegisterDevice) super.setQuotaUser(quotaUser);
    }

    @Override
    public RegisterDevice setUserIp(java.lang.String userIp) {
      return (RegisterDevice) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String gmail;

    /**

     */
    public java.lang.String getGmail() {
      return gmail;
    }

    public RegisterDevice setGmail(java.lang.String gmail) {
      this.gmail = gmail;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String regId;

    /**

     */
    public java.lang.String getRegId() {
      return regId;
    }

    public RegisterDevice setRegId(java.lang.String regId) {
      this.regId = regId;
      return this;
    }

    @Override
    public RegisterDevice set(String parameterName, Object value) {
      return (RegisterDevice) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "removeComment".
   *
   * This request holds the parameters needed by the spotshotendpoint server.  After setting any
   * optional parameters, call the {@link RemoveComment#execute()} method to invoke the remote
   * operation.
   *
   * @param id
   * @return the request
   */
  public RemoveComment removeComment(java.lang.String id) throws java.io.IOException {
    RemoveComment result = new RemoveComment(id);
    initialize(result);
    return result;
  }

  public class RemoveComment extends SpotshotendpointRequest<Void> {

    private static final String REST_PATH = "comment/{id}";

    /**
     * Create a request for the method "removeComment".
     *
     * This request holds the parameters needed by the the spotshotendpoint server.  After setting any
     * optional parameters, call the {@link RemoveComment#execute()} method to invoke the remote
     * operation. <p> {@link RemoveComment#initialize(com.google.api.client.googleapis.services.Abstra
     * ctGoogleClientRequest)} must be called to initialize this instance immediately after invoking
     * the constructor. </p>
     *
     * @param id
     * @since 1.13
     */
    protected RemoveComment(java.lang.String id) {
      super(Spotshotendpoint.this, "DELETE", REST_PATH, null, Void.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
    }

    @Override
    public RemoveComment setAlt(java.lang.String alt) {
      return (RemoveComment) super.setAlt(alt);
    }

    @Override
    public RemoveComment setFields(java.lang.String fields) {
      return (RemoveComment) super.setFields(fields);
    }

    @Override
    public RemoveComment setKey(java.lang.String key) {
      return (RemoveComment) super.setKey(key);
    }

    @Override
    public RemoveComment setOauthToken(java.lang.String oauthToken) {
      return (RemoveComment) super.setOauthToken(oauthToken);
    }

    @Override
    public RemoveComment setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (RemoveComment) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public RemoveComment setQuotaUser(java.lang.String quotaUser) {
      return (RemoveComment) super.setQuotaUser(quotaUser);
    }

    @Override
    public RemoveComment setUserIp(java.lang.String userIp) {
      return (RemoveComment) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String id;

    /**

     */
    public java.lang.String getId() {
      return id;
    }

    public RemoveComment setId(java.lang.String id) {
      this.id = id;
      return this;
    }

    @Override
    public RemoveComment set(String parameterName, Object value) {
      return (RemoveComment) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "removeFriendship".
   *
   * This request holds the parameters needed by the spotshotendpoint server.  After setting any
   * optional parameters, call the {@link RemoveFriendship#execute()} method to invoke the remote
   * operation.
   *
   * @param id
   * @return the request
   */
  public RemoveFriendship removeFriendship(java.lang.String id) throws java.io.IOException {
    RemoveFriendship result = new RemoveFriendship(id);
    initialize(result);
    return result;
  }

  public class RemoveFriendship extends SpotshotendpointRequest<Void> {

    private static final String REST_PATH = "friendship/{id}";

    /**
     * Create a request for the method "removeFriendship".
     *
     * This request holds the parameters needed by the the spotshotendpoint server.  After setting any
     * optional parameters, call the {@link RemoveFriendship#execute()} method to invoke the remote
     * operation. <p> {@link RemoveFriendship#initialize(com.google.api.client.googleapis.services.Abs
     * tractGoogleClientRequest)} must be called to initialize this instance immediately after
     * invoking the constructor. </p>
     *
     * @param id
     * @since 1.13
     */
    protected RemoveFriendship(java.lang.String id) {
      super(Spotshotendpoint.this, "DELETE", REST_PATH, null, Void.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
    }

    @Override
    public RemoveFriendship setAlt(java.lang.String alt) {
      return (RemoveFriendship) super.setAlt(alt);
    }

    @Override
    public RemoveFriendship setFields(java.lang.String fields) {
      return (RemoveFriendship) super.setFields(fields);
    }

    @Override
    public RemoveFriendship setKey(java.lang.String key) {
      return (RemoveFriendship) super.setKey(key);
    }

    @Override
    public RemoveFriendship setOauthToken(java.lang.String oauthToken) {
      return (RemoveFriendship) super.setOauthToken(oauthToken);
    }

    @Override
    public RemoveFriendship setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (RemoveFriendship) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public RemoveFriendship setQuotaUser(java.lang.String quotaUser) {
      return (RemoveFriendship) super.setQuotaUser(quotaUser);
    }

    @Override
    public RemoveFriendship setUserIp(java.lang.String userIp) {
      return (RemoveFriendship) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String id;

    /**

     */
    public java.lang.String getId() {
      return id;
    }

    public RemoveFriendship setId(java.lang.String id) {
      this.id = id;
      return this;
    }

    @Override
    public RemoveFriendship set(String parameterName, Object value) {
      return (RemoveFriendship) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "removePhoto".
   *
   * This request holds the parameters needed by the spotshotendpoint server.  After setting any
   * optional parameters, call the {@link RemovePhoto#execute()} method to invoke the remote
   * operation.
   *
   * @param id
   * @return the request
   */
  public RemovePhoto removePhoto(java.lang.String id) throws java.io.IOException {
    RemovePhoto result = new RemovePhoto(id);
    initialize(result);
    return result;
  }

  public class RemovePhoto extends SpotshotendpointRequest<Void> {

    private static final String REST_PATH = "photo/{id}";

    /**
     * Create a request for the method "removePhoto".
     *
     * This request holds the parameters needed by the the spotshotendpoint server.  After setting any
     * optional parameters, call the {@link RemovePhoto#execute()} method to invoke the remote
     * operation. <p> {@link
     * RemovePhoto#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param id
     * @since 1.13
     */
    protected RemovePhoto(java.lang.String id) {
      super(Spotshotendpoint.this, "DELETE", REST_PATH, null, Void.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
    }

    @Override
    public RemovePhoto setAlt(java.lang.String alt) {
      return (RemovePhoto) super.setAlt(alt);
    }

    @Override
    public RemovePhoto setFields(java.lang.String fields) {
      return (RemovePhoto) super.setFields(fields);
    }

    @Override
    public RemovePhoto setKey(java.lang.String key) {
      return (RemovePhoto) super.setKey(key);
    }

    @Override
    public RemovePhoto setOauthToken(java.lang.String oauthToken) {
      return (RemovePhoto) super.setOauthToken(oauthToken);
    }

    @Override
    public RemovePhoto setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (RemovePhoto) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public RemovePhoto setQuotaUser(java.lang.String quotaUser) {
      return (RemovePhoto) super.setQuotaUser(quotaUser);
    }

    @Override
    public RemovePhoto setUserIp(java.lang.String userIp) {
      return (RemovePhoto) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String id;

    /**

     */
    public java.lang.String getId() {
      return id;
    }

    public RemovePhoto setId(java.lang.String id) {
      this.id = id;
      return this;
    }

    @Override
    public RemovePhoto set(String parameterName, Object value) {
      return (RemovePhoto) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "removeRating".
   *
   * This request holds the parameters needed by the spotshotendpoint server.  After setting any
   * optional parameters, call the {@link RemoveRating#execute()} method to invoke the remote
   * operation.
   *
   * @param id
   * @return the request
   */
  public RemoveRating removeRating(java.lang.String id) throws java.io.IOException {
    RemoveRating result = new RemoveRating(id);
    initialize(result);
    return result;
  }

  public class RemoveRating extends SpotshotendpointRequest<Void> {

    private static final String REST_PATH = "rating/{id}";

    /**
     * Create a request for the method "removeRating".
     *
     * This request holds the parameters needed by the the spotshotendpoint server.  After setting any
     * optional parameters, call the {@link RemoveRating#execute()} method to invoke the remote
     * operation. <p> {@link
     * RemoveRating#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param id
     * @since 1.13
     */
    protected RemoveRating(java.lang.String id) {
      super(Spotshotendpoint.this, "DELETE", REST_PATH, null, Void.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
    }

    @Override
    public RemoveRating setAlt(java.lang.String alt) {
      return (RemoveRating) super.setAlt(alt);
    }

    @Override
    public RemoveRating setFields(java.lang.String fields) {
      return (RemoveRating) super.setFields(fields);
    }

    @Override
    public RemoveRating setKey(java.lang.String key) {
      return (RemoveRating) super.setKey(key);
    }

    @Override
    public RemoveRating setOauthToken(java.lang.String oauthToken) {
      return (RemoveRating) super.setOauthToken(oauthToken);
    }

    @Override
    public RemoveRating setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (RemoveRating) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public RemoveRating setQuotaUser(java.lang.String quotaUser) {
      return (RemoveRating) super.setQuotaUser(quotaUser);
    }

    @Override
    public RemoveRating setUserIp(java.lang.String userIp) {
      return (RemoveRating) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String id;

    /**

     */
    public java.lang.String getId() {
      return id;
    }

    public RemoveRating setId(java.lang.String id) {
      this.id = id;
      return this;
    }

    @Override
    public RemoveRating set(String parameterName, Object value) {
      return (RemoveRating) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "removeUser".
   *
   * This request holds the parameters needed by the spotshotendpoint server.  After setting any
   * optional parameters, call the {@link RemoveUser#execute()} method to invoke the remote operation.
   *
   * @param id
   * @return the request
   */
  public RemoveUser removeUser(java.lang.Long id) throws java.io.IOException {
    RemoveUser result = new RemoveUser(id);
    initialize(result);
    return result;
  }

  public class RemoveUser extends SpotshotendpointRequest<Void> {

    private static final String REST_PATH = "user/{id}";

    /**
     * Create a request for the method "removeUser".
     *
     * This request holds the parameters needed by the the spotshotendpoint server.  After setting any
     * optional parameters, call the {@link RemoveUser#execute()} method to invoke the remote
     * operation. <p> {@link
     * RemoveUser#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param id
     * @since 1.13
     */
    protected RemoveUser(java.lang.Long id) {
      super(Spotshotendpoint.this, "DELETE", REST_PATH, null, Void.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
    }

    @Override
    public RemoveUser setAlt(java.lang.String alt) {
      return (RemoveUser) super.setAlt(alt);
    }

    @Override
    public RemoveUser setFields(java.lang.String fields) {
      return (RemoveUser) super.setFields(fields);
    }

    @Override
    public RemoveUser setKey(java.lang.String key) {
      return (RemoveUser) super.setKey(key);
    }

    @Override
    public RemoveUser setOauthToken(java.lang.String oauthToken) {
      return (RemoveUser) super.setOauthToken(oauthToken);
    }

    @Override
    public RemoveUser setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (RemoveUser) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public RemoveUser setQuotaUser(java.lang.String quotaUser) {
      return (RemoveUser) super.setQuotaUser(quotaUser);
    }

    @Override
    public RemoveUser setUserIp(java.lang.String userIp) {
      return (RemoveUser) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long id;

    /**

     */
    public java.lang.Long getId() {
      return id;
    }

    public RemoveUser setId(java.lang.Long id) {
      this.id = id;
      return this;
    }

    @Override
    public RemoveUser set(String parameterName, Object value) {
      return (RemoveUser) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "requestNewPassword".
   *
   * This request holds the parameters needed by the spotshotendpoint server.  After setting any
   * optional parameters, call the {@link RequestNewPassword#execute()} method to invoke the remote
   * operation.
   *
   * @param email
   * @return the request
   */
  public RequestNewPassword requestNewPassword(java.lang.String email) throws java.io.IOException {
    RequestNewPassword result = new RequestNewPassword(email);
    initialize(result);
    return result;
  }

  public class RequestNewPassword extends SpotshotendpointRequest<Void> {

    private static final String REST_PATH = "requestNewPassword/{email}";

    /**
     * Create a request for the method "requestNewPassword".
     *
     * This request holds the parameters needed by the the spotshotendpoint server.  After setting any
     * optional parameters, call the {@link RequestNewPassword#execute()} method to invoke the remote
     * operation. <p> {@link RequestNewPassword#initialize(com.google.api.client.googleapis.services.A
     * bstractGoogleClientRequest)} must be called to initialize this instance immediately after
     * invoking the constructor. </p>
     *
     * @param email
     * @since 1.13
     */
    protected RequestNewPassword(java.lang.String email) {
      super(Spotshotendpoint.this, "POST", REST_PATH, null, Void.class);
      this.email = com.google.api.client.util.Preconditions.checkNotNull(email, "Required parameter email must be specified.");
    }

    @Override
    public RequestNewPassword setAlt(java.lang.String alt) {
      return (RequestNewPassword) super.setAlt(alt);
    }

    @Override
    public RequestNewPassword setFields(java.lang.String fields) {
      return (RequestNewPassword) super.setFields(fields);
    }

    @Override
    public RequestNewPassword setKey(java.lang.String key) {
      return (RequestNewPassword) super.setKey(key);
    }

    @Override
    public RequestNewPassword setOauthToken(java.lang.String oauthToken) {
      return (RequestNewPassword) super.setOauthToken(oauthToken);
    }

    @Override
    public RequestNewPassword setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (RequestNewPassword) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public RequestNewPassword setQuotaUser(java.lang.String quotaUser) {
      return (RequestNewPassword) super.setQuotaUser(quotaUser);
    }

    @Override
    public RequestNewPassword setUserIp(java.lang.String userIp) {
      return (RequestNewPassword) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String email;

    /**

     */
    public java.lang.String getEmail() {
      return email;
    }

    public RequestNewPassword setEmail(java.lang.String email) {
      this.email = email;
      return this;
    }

    @Override
    public RequestNewPassword set(String parameterName, Object value) {
      return (RequestNewPassword) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "sendFriendshipRequest".
   *
   * This request holds the parameters needed by the spotshotendpoint server.  After setting any
   * optional parameters, call the {@link SendFriendshipRequest#execute()} method to invoke the remote
   * operation.
   *
   * @param srcFriend
   * @param targetFriend
   * @return the request
   */
  public SendFriendshipRequest sendFriendshipRequest(java.lang.Long srcFriend, java.lang.Long targetFriend) throws java.io.IOException {
    SendFriendshipRequest result = new SendFriendshipRequest(srcFriend, targetFriend);
    initialize(result);
    return result;
  }

  public class SendFriendshipRequest extends SpotshotendpointRequest<com.aqpup.model.spotshotendpoint.model.Friendship> {

    private static final String REST_PATH = "sendFriendshipRequest/{srcFriend}/{targetFriend}";

    /**
     * Create a request for the method "sendFriendshipRequest".
     *
     * This request holds the parameters needed by the the spotshotendpoint server.  After setting any
     * optional parameters, call the {@link SendFriendshipRequest#execute()} method to invoke the
     * remote operation. <p> {@link SendFriendshipRequest#initialize(com.google.api.client.googleapis.
     * services.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
     * after invoking the constructor. </p>
     *
     * @param srcFriend
     * @param targetFriend
     * @since 1.13
     */
    protected SendFriendshipRequest(java.lang.Long srcFriend, java.lang.Long targetFriend) {
      super(Spotshotendpoint.this, "POST", REST_PATH, null, com.aqpup.model.spotshotendpoint.model.Friendship.class);
      this.srcFriend = com.google.api.client.util.Preconditions.checkNotNull(srcFriend, "Required parameter srcFriend must be specified.");
      this.targetFriend = com.google.api.client.util.Preconditions.checkNotNull(targetFriend, "Required parameter targetFriend must be specified.");
    }

    @Override
    public SendFriendshipRequest setAlt(java.lang.String alt) {
      return (SendFriendshipRequest) super.setAlt(alt);
    }

    @Override
    public SendFriendshipRequest setFields(java.lang.String fields) {
      return (SendFriendshipRequest) super.setFields(fields);
    }

    @Override
    public SendFriendshipRequest setKey(java.lang.String key) {
      return (SendFriendshipRequest) super.setKey(key);
    }

    @Override
    public SendFriendshipRequest setOauthToken(java.lang.String oauthToken) {
      return (SendFriendshipRequest) super.setOauthToken(oauthToken);
    }

    @Override
    public SendFriendshipRequest setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (SendFriendshipRequest) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public SendFriendshipRequest setQuotaUser(java.lang.String quotaUser) {
      return (SendFriendshipRequest) super.setQuotaUser(quotaUser);
    }

    @Override
    public SendFriendshipRequest setUserIp(java.lang.String userIp) {
      return (SendFriendshipRequest) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long srcFriend;

    /**

     */
    public java.lang.Long getSrcFriend() {
      return srcFriend;
    }

    public SendFriendshipRequest setSrcFriend(java.lang.Long srcFriend) {
      this.srcFriend = srcFriend;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Long targetFriend;

    /**

     */
    public java.lang.Long getTargetFriend() {
      return targetFriend;
    }

    public SendFriendshipRequest setTargetFriend(java.lang.Long targetFriend) {
      this.targetFriend = targetFriend;
      return this;
    }

    @Override
    public SendFriendshipRequest set(String parameterName, Object value) {
      return (SendFriendshipRequest) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "sendFriendshipRequestbyUsername".
   *
   * This request holds the parameters needed by the spotshotendpoint server.  After setting any
   * optional parameters, call the {@link SendFriendshipRequestbyUsername#execute()} method to invoke
   * the remote operation.
   *
   * @param srcFriend
   * @param targetFriend
   * @return the request
   */
  public SendFriendshipRequestbyUsername sendFriendshipRequestbyUsername(java.lang.Long srcFriend, java.lang.String targetFriend) throws java.io.IOException {
    SendFriendshipRequestbyUsername result = new SendFriendshipRequestbyUsername(srcFriend, targetFriend);
    initialize(result);
    return result;
  }

  public class SendFriendshipRequestbyUsername extends SpotshotendpointRequest<com.aqpup.model.spotshotendpoint.model.Friendship> {

    private static final String REST_PATH = "sendFriendshipRequestbyUsername/{srcFriend}/{targetFriend}";

    /**
     * Create a request for the method "sendFriendshipRequestbyUsername".
     *
     * This request holds the parameters needed by the the spotshotendpoint server.  After setting any
     * optional parameters, call the {@link SendFriendshipRequestbyUsername#execute()} method to
     * invoke the remote operation. <p> {@link SendFriendshipRequestbyUsername#initialize(com.google.a
     * pi.client.googleapis.services.AbstractGoogleClientRequest)} must be called to initialize this
     * instance immediately after invoking the constructor. </p>
     *
     * @param srcFriend
     * @param targetFriend
     * @since 1.13
     */
    protected SendFriendshipRequestbyUsername(java.lang.Long srcFriend, java.lang.String targetFriend) {
      super(Spotshotendpoint.this, "POST", REST_PATH, null, com.aqpup.model.spotshotendpoint.model.Friendship.class);
      this.srcFriend = com.google.api.client.util.Preconditions.checkNotNull(srcFriend, "Required parameter srcFriend must be specified.");
      this.targetFriend = com.google.api.client.util.Preconditions.checkNotNull(targetFriend, "Required parameter targetFriend must be specified.");
    }

    @Override
    public SendFriendshipRequestbyUsername setAlt(java.lang.String alt) {
      return (SendFriendshipRequestbyUsername) super.setAlt(alt);
    }

    @Override
    public SendFriendshipRequestbyUsername setFields(java.lang.String fields) {
      return (SendFriendshipRequestbyUsername) super.setFields(fields);
    }

    @Override
    public SendFriendshipRequestbyUsername setKey(java.lang.String key) {
      return (SendFriendshipRequestbyUsername) super.setKey(key);
    }

    @Override
    public SendFriendshipRequestbyUsername setOauthToken(java.lang.String oauthToken) {
      return (SendFriendshipRequestbyUsername) super.setOauthToken(oauthToken);
    }

    @Override
    public SendFriendshipRequestbyUsername setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (SendFriendshipRequestbyUsername) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public SendFriendshipRequestbyUsername setQuotaUser(java.lang.String quotaUser) {
      return (SendFriendshipRequestbyUsername) super.setQuotaUser(quotaUser);
    }

    @Override
    public SendFriendshipRequestbyUsername setUserIp(java.lang.String userIp) {
      return (SendFriendshipRequestbyUsername) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long srcFriend;

    /**

     */
    public java.lang.Long getSrcFriend() {
      return srcFriend;
    }

    public SendFriendshipRequestbyUsername setSrcFriend(java.lang.Long srcFriend) {
      this.srcFriend = srcFriend;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String targetFriend;

    /**

     */
    public java.lang.String getTargetFriend() {
      return targetFriend;
    }

    public SendFriendshipRequestbyUsername setTargetFriend(java.lang.String targetFriend) {
      this.targetFriend = targetFriend;
      return this;
    }

    @Override
    public SendFriendshipRequestbyUsername set(String parameterName, Object value) {
      return (SendFriendshipRequestbyUsername) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "sendMessage".
   *
   * This request holds the parameters needed by the spotshotendpoint server.  After setting any
   * optional parameters, call the {@link SendMessage#execute()} method to invoke the remote
   * operation.
   *
   * @param msg
   * @param targetId
   * @param fromId
   * @return the request
   */
  public SendMessage sendMessage(java.lang.String msg, java.lang.Long targetId, java.lang.Long fromId) throws java.io.IOException {
    SendMessage result = new SendMessage(msg, targetId, fromId);
    initialize(result);
    return result;
  }

  public class SendMessage extends SpotshotendpointRequest<Void> {

    private static final String REST_PATH = "sendMessage/{msg}/{targetId}/{fromId}";

    /**
     * Create a request for the method "sendMessage".
     *
     * This request holds the parameters needed by the the spotshotendpoint server.  After setting any
     * optional parameters, call the {@link SendMessage#execute()} method to invoke the remote
     * operation. <p> {@link
     * SendMessage#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param msg
     * @param targetId
     * @param fromId
     * @since 1.13
     */
    protected SendMessage(java.lang.String msg, java.lang.Long targetId, java.lang.Long fromId) {
      super(Spotshotendpoint.this, "POST", REST_PATH, null, Void.class);
      this.msg = com.google.api.client.util.Preconditions.checkNotNull(msg, "Required parameter msg must be specified.");
      this.targetId = com.google.api.client.util.Preconditions.checkNotNull(targetId, "Required parameter targetId must be specified.");
      this.fromId = com.google.api.client.util.Preconditions.checkNotNull(fromId, "Required parameter fromId must be specified.");
    }

    @Override
    public SendMessage setAlt(java.lang.String alt) {
      return (SendMessage) super.setAlt(alt);
    }

    @Override
    public SendMessage setFields(java.lang.String fields) {
      return (SendMessage) super.setFields(fields);
    }

    @Override
    public SendMessage setKey(java.lang.String key) {
      return (SendMessage) super.setKey(key);
    }

    @Override
    public SendMessage setOauthToken(java.lang.String oauthToken) {
      return (SendMessage) super.setOauthToken(oauthToken);
    }

    @Override
    public SendMessage setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (SendMessage) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public SendMessage setQuotaUser(java.lang.String quotaUser) {
      return (SendMessage) super.setQuotaUser(quotaUser);
    }

    @Override
    public SendMessage setUserIp(java.lang.String userIp) {
      return (SendMessage) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String msg;

    /**

     */
    public java.lang.String getMsg() {
      return msg;
    }

    public SendMessage setMsg(java.lang.String msg) {
      this.msg = msg;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Long targetId;

    /**

     */
    public java.lang.Long getTargetId() {
      return targetId;
    }

    public SendMessage setTargetId(java.lang.Long targetId) {
      this.targetId = targetId;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Long fromId;

    /**

     */
    public java.lang.Long getFromId() {
      return fromId;
    }

    public SendMessage setFromId(java.lang.Long fromId) {
      this.fromId = fromId;
      return this;
    }

    @Override
    public SendMessage set(String parameterName, Object value) {
      return (SendMessage) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "updateComment".
   *
   * This request holds the parameters needed by the spotshotendpoint server.  After setting any
   * optional parameters, call the {@link UpdateComment#execute()} method to invoke the remote
   * operation.
   *
   * @param content the {@link com.aqpup.model.spotshotendpoint.model.Comment}
   * @return the request
   */
  public UpdateComment updateComment(com.aqpup.model.spotshotendpoint.model.Comment content) throws java.io.IOException {
    UpdateComment result = new UpdateComment(content);
    initialize(result);
    return result;
  }

  public class UpdateComment extends SpotshotendpointRequest<com.aqpup.model.spotshotendpoint.model.Comment> {

    private static final String REST_PATH = "comment";

    /**
     * Create a request for the method "updateComment".
     *
     * This request holds the parameters needed by the the spotshotendpoint server.  After setting any
     * optional parameters, call the {@link UpdateComment#execute()} method to invoke the remote
     * operation. <p> {@link UpdateComment#initialize(com.google.api.client.googleapis.services.Abstra
     * ctGoogleClientRequest)} must be called to initialize this instance immediately after invoking
     * the constructor. </p>
     *
     * @param content the {@link com.aqpup.model.spotshotendpoint.model.Comment}
     * @since 1.13
     */
    protected UpdateComment(com.aqpup.model.spotshotendpoint.model.Comment content) {
      super(Spotshotendpoint.this, "PUT", REST_PATH, content, com.aqpup.model.spotshotendpoint.model.Comment.class);
    }

    @Override
    public UpdateComment setAlt(java.lang.String alt) {
      return (UpdateComment) super.setAlt(alt);
    }

    @Override
    public UpdateComment setFields(java.lang.String fields) {
      return (UpdateComment) super.setFields(fields);
    }

    @Override
    public UpdateComment setKey(java.lang.String key) {
      return (UpdateComment) super.setKey(key);
    }

    @Override
    public UpdateComment setOauthToken(java.lang.String oauthToken) {
      return (UpdateComment) super.setOauthToken(oauthToken);
    }

    @Override
    public UpdateComment setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (UpdateComment) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public UpdateComment setQuotaUser(java.lang.String quotaUser) {
      return (UpdateComment) super.setQuotaUser(quotaUser);
    }

    @Override
    public UpdateComment setUserIp(java.lang.String userIp) {
      return (UpdateComment) super.setUserIp(userIp);
    }

    @Override
    public UpdateComment set(String parameterName, Object value) {
      return (UpdateComment) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "updateFriendship".
   *
   * This request holds the parameters needed by the spotshotendpoint server.  After setting any
   * optional parameters, call the {@link UpdateFriendship#execute()} method to invoke the remote
   * operation.
   *
   * @param content the {@link com.aqpup.model.spotshotendpoint.model.Friendship}
   * @return the request
   */
  public UpdateFriendship updateFriendship(com.aqpup.model.spotshotendpoint.model.Friendship content) throws java.io.IOException {
    UpdateFriendship result = new UpdateFriendship(content);
    initialize(result);
    return result;
  }

  public class UpdateFriendship extends SpotshotendpointRequest<com.aqpup.model.spotshotendpoint.model.Friendship> {

    private static final String REST_PATH = "friendship";

    /**
     * Create a request for the method "updateFriendship".
     *
     * This request holds the parameters needed by the the spotshotendpoint server.  After setting any
     * optional parameters, call the {@link UpdateFriendship#execute()} method to invoke the remote
     * operation. <p> {@link UpdateFriendship#initialize(com.google.api.client.googleapis.services.Abs
     * tractGoogleClientRequest)} must be called to initialize this instance immediately after
     * invoking the constructor. </p>
     *
     * @param content the {@link com.aqpup.model.spotshotendpoint.model.Friendship}
     * @since 1.13
     */
    protected UpdateFriendship(com.aqpup.model.spotshotendpoint.model.Friendship content) {
      super(Spotshotendpoint.this, "PUT", REST_PATH, content, com.aqpup.model.spotshotendpoint.model.Friendship.class);
    }

    @Override
    public UpdateFriendship setAlt(java.lang.String alt) {
      return (UpdateFriendship) super.setAlt(alt);
    }

    @Override
    public UpdateFriendship setFields(java.lang.String fields) {
      return (UpdateFriendship) super.setFields(fields);
    }

    @Override
    public UpdateFriendship setKey(java.lang.String key) {
      return (UpdateFriendship) super.setKey(key);
    }

    @Override
    public UpdateFriendship setOauthToken(java.lang.String oauthToken) {
      return (UpdateFriendship) super.setOauthToken(oauthToken);
    }

    @Override
    public UpdateFriendship setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (UpdateFriendship) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public UpdateFriendship setQuotaUser(java.lang.String quotaUser) {
      return (UpdateFriendship) super.setQuotaUser(quotaUser);
    }

    @Override
    public UpdateFriendship setUserIp(java.lang.String userIp) {
      return (UpdateFriendship) super.setUserIp(userIp);
    }

    @Override
    public UpdateFriendship set(String parameterName, Object value) {
      return (UpdateFriendship) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "updatePhoto".
   *
   * This request holds the parameters needed by the spotshotendpoint server.  After setting any
   * optional parameters, call the {@link UpdatePhoto#execute()} method to invoke the remote
   * operation.
   *
   * @param content the {@link com.aqpup.model.spotshotendpoint.model.Photo}
   * @return the request
   */
  public UpdatePhoto updatePhoto(com.aqpup.model.spotshotendpoint.model.Photo content) throws java.io.IOException {
    UpdatePhoto result = new UpdatePhoto(content);
    initialize(result);
    return result;
  }

  public class UpdatePhoto extends SpotshotendpointRequest<com.aqpup.model.spotshotendpoint.model.Photo> {

    private static final String REST_PATH = "photo";

    /**
     * Create a request for the method "updatePhoto".
     *
     * This request holds the parameters needed by the the spotshotendpoint server.  After setting any
     * optional parameters, call the {@link UpdatePhoto#execute()} method to invoke the remote
     * operation. <p> {@link
     * UpdatePhoto#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param content the {@link com.aqpup.model.spotshotendpoint.model.Photo}
     * @since 1.13
     */
    protected UpdatePhoto(com.aqpup.model.spotshotendpoint.model.Photo content) {
      super(Spotshotendpoint.this, "PUT", REST_PATH, content, com.aqpup.model.spotshotendpoint.model.Photo.class);
    }

    @Override
    public UpdatePhoto setAlt(java.lang.String alt) {
      return (UpdatePhoto) super.setAlt(alt);
    }

    @Override
    public UpdatePhoto setFields(java.lang.String fields) {
      return (UpdatePhoto) super.setFields(fields);
    }

    @Override
    public UpdatePhoto setKey(java.lang.String key) {
      return (UpdatePhoto) super.setKey(key);
    }

    @Override
    public UpdatePhoto setOauthToken(java.lang.String oauthToken) {
      return (UpdatePhoto) super.setOauthToken(oauthToken);
    }

    @Override
    public UpdatePhoto setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (UpdatePhoto) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public UpdatePhoto setQuotaUser(java.lang.String quotaUser) {
      return (UpdatePhoto) super.setQuotaUser(quotaUser);
    }

    @Override
    public UpdatePhoto setUserIp(java.lang.String userIp) {
      return (UpdatePhoto) super.setUserIp(userIp);
    }

    @Override
    public UpdatePhoto set(String parameterName, Object value) {
      return (UpdatePhoto) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "updateRating".
   *
   * This request holds the parameters needed by the spotshotendpoint server.  After setting any
   * optional parameters, call the {@link UpdateRating#execute()} method to invoke the remote
   * operation.
   *
   * @param content the {@link com.aqpup.model.spotshotendpoint.model.Rating}
   * @return the request
   */
  public UpdateRating updateRating(com.aqpup.model.spotshotendpoint.model.Rating content) throws java.io.IOException {
    UpdateRating result = new UpdateRating(content);
    initialize(result);
    return result;
  }

  public class UpdateRating extends SpotshotendpointRequest<com.aqpup.model.spotshotendpoint.model.Rating> {

    private static final String REST_PATH = "rating";

    /**
     * Create a request for the method "updateRating".
     *
     * This request holds the parameters needed by the the spotshotendpoint server.  After setting any
     * optional parameters, call the {@link UpdateRating#execute()} method to invoke the remote
     * operation. <p> {@link
     * UpdateRating#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param content the {@link com.aqpup.model.spotshotendpoint.model.Rating}
     * @since 1.13
     */
    protected UpdateRating(com.aqpup.model.spotshotendpoint.model.Rating content) {
      super(Spotshotendpoint.this, "PUT", REST_PATH, content, com.aqpup.model.spotshotendpoint.model.Rating.class);
    }

    @Override
    public UpdateRating setAlt(java.lang.String alt) {
      return (UpdateRating) super.setAlt(alt);
    }

    @Override
    public UpdateRating setFields(java.lang.String fields) {
      return (UpdateRating) super.setFields(fields);
    }

    @Override
    public UpdateRating setKey(java.lang.String key) {
      return (UpdateRating) super.setKey(key);
    }

    @Override
    public UpdateRating setOauthToken(java.lang.String oauthToken) {
      return (UpdateRating) super.setOauthToken(oauthToken);
    }

    @Override
    public UpdateRating setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (UpdateRating) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public UpdateRating setQuotaUser(java.lang.String quotaUser) {
      return (UpdateRating) super.setQuotaUser(quotaUser);
    }

    @Override
    public UpdateRating setUserIp(java.lang.String userIp) {
      return (UpdateRating) super.setUserIp(userIp);
    }

    @Override
    public UpdateRating set(String parameterName, Object value) {
      return (UpdateRating) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "updateUser".
   *
   * This request holds the parameters needed by the spotshotendpoint server.  After setting any
   * optional parameters, call the {@link UpdateUser#execute()} method to invoke the remote operation.
   *
   * @param content the {@link com.aqpup.model.spotshotendpoint.model.User}
   * @return the request
   */
  public UpdateUser updateUser(com.aqpup.model.spotshotendpoint.model.User content) throws java.io.IOException {
    UpdateUser result = new UpdateUser(content);
    initialize(result);
    return result;
  }

  public class UpdateUser extends SpotshotendpointRequest<com.aqpup.model.spotshotendpoint.model.User> {

    private static final String REST_PATH = "user";

    /**
     * Create a request for the method "updateUser".
     *
     * This request holds the parameters needed by the the spotshotendpoint server.  After setting any
     * optional parameters, call the {@link UpdateUser#execute()} method to invoke the remote
     * operation. <p> {@link
     * UpdateUser#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param content the {@link com.aqpup.model.spotshotendpoint.model.User}
     * @since 1.13
     */
    protected UpdateUser(com.aqpup.model.spotshotendpoint.model.User content) {
      super(Spotshotendpoint.this, "PUT", REST_PATH, content, com.aqpup.model.spotshotendpoint.model.User.class);
    }

    @Override
    public UpdateUser setAlt(java.lang.String alt) {
      return (UpdateUser) super.setAlt(alt);
    }

    @Override
    public UpdateUser setFields(java.lang.String fields) {
      return (UpdateUser) super.setFields(fields);
    }

    @Override
    public UpdateUser setKey(java.lang.String key) {
      return (UpdateUser) super.setKey(key);
    }

    @Override
    public UpdateUser setOauthToken(java.lang.String oauthToken) {
      return (UpdateUser) super.setOauthToken(oauthToken);
    }

    @Override
    public UpdateUser setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (UpdateUser) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public UpdateUser setQuotaUser(java.lang.String quotaUser) {
      return (UpdateUser) super.setQuotaUser(quotaUser);
    }

    @Override
    public UpdateUser setUserIp(java.lang.String userIp) {
      return (UpdateUser) super.setUserIp(userIp);
    }

    @Override
    public UpdateUser set(String parameterName, Object value) {
      return (UpdateUser) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "validateUser".
   *
   * This request holds the parameters needed by the spotshotendpoint server.  After setting any
   * optional parameters, call the {@link ValidateUser#execute()} method to invoke the remote
   * operation.
   *
   * @param username
   * @param password
   * @param regId
   * @return the request
   */
  public ValidateUser validateUser(java.lang.String username, java.lang.String password, java.lang.String regId) throws java.io.IOException {
    ValidateUser result = new ValidateUser(username, password, regId);
    initialize(result);
    return result;
  }

  public class ValidateUser extends SpotshotendpointRequest<com.aqpup.model.spotshotendpoint.model.User> {

    private static final String REST_PATH = "validateUser/{username}/{password}/{regId}";

    /**
     * Create a request for the method "validateUser".
     *
     * This request holds the parameters needed by the the spotshotendpoint server.  After setting any
     * optional parameters, call the {@link ValidateUser#execute()} method to invoke the remote
     * operation. <p> {@link
     * ValidateUser#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param username
     * @param password
     * @param regId
     * @since 1.13
     */
    protected ValidateUser(java.lang.String username, java.lang.String password, java.lang.String regId) {
      super(Spotshotendpoint.this, "POST", REST_PATH, null, com.aqpup.model.spotshotendpoint.model.User.class);
      this.username = com.google.api.client.util.Preconditions.checkNotNull(username, "Required parameter username must be specified.");
      this.password = com.google.api.client.util.Preconditions.checkNotNull(password, "Required parameter password must be specified.");
      this.regId = com.google.api.client.util.Preconditions.checkNotNull(regId, "Required parameter regId must be specified.");
    }

    @Override
    public ValidateUser setAlt(java.lang.String alt) {
      return (ValidateUser) super.setAlt(alt);
    }

    @Override
    public ValidateUser setFields(java.lang.String fields) {
      return (ValidateUser) super.setFields(fields);
    }

    @Override
    public ValidateUser setKey(java.lang.String key) {
      return (ValidateUser) super.setKey(key);
    }

    @Override
    public ValidateUser setOauthToken(java.lang.String oauthToken) {
      return (ValidateUser) super.setOauthToken(oauthToken);
    }

    @Override
    public ValidateUser setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ValidateUser) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ValidateUser setQuotaUser(java.lang.String quotaUser) {
      return (ValidateUser) super.setQuotaUser(quotaUser);
    }

    @Override
    public ValidateUser setUserIp(java.lang.String userIp) {
      return (ValidateUser) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String username;

    /**

     */
    public java.lang.String getUsername() {
      return username;
    }

    public ValidateUser setUsername(java.lang.String username) {
      this.username = username;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String password;

    /**

     */
    public java.lang.String getPassword() {
      return password;
    }

    public ValidateUser setPassword(java.lang.String password) {
      this.password = password;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String regId;

    /**

     */
    public java.lang.String getRegId() {
      return regId;
    }

    public ValidateUser setRegId(java.lang.String regId) {
      this.regId = regId;
      return this;
    }

    @Override
    public ValidateUser set(String parameterName, Object value) {
      return (ValidateUser) super.set(parameterName, value);
    }
  }

  /**
   * Builder for {@link Spotshotendpoint}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
    }

    /** Builds a new instance of {@link Spotshotendpoint}. */
    @Override
    public Spotshotendpoint build() {
      return new Spotshotendpoint(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link SpotshotendpointRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setSpotshotendpointRequestInitializer(
        SpotshotendpointRequestInitializer spotshotendpointRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(spotshotendpointRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
